{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Inicio","text":""},{"location":"index.html#programacion-utfsm","title":"Programaci\u00f3n UTFSM","text":"<p>Material gu\u00eda para las asignaturas: </p> <ul> <li>INF-129: Introducci\u00f3n a la Programaci\u00f3n</li> <li>IWI-131: Programaci\u00f3n</li> </ul> <p>Versi\u00f3n web del material del curso. En constante desarrollo...</p>"},{"location":"index.html#compilado-de-ejercicios","title":"Compilado de ejercicios","text":"<p>Puede acceder a los ejercicios revisados en clases en este enlace.</p>"},{"location":"index.html#contacto","title":"Contacto","text":"<p>Si encuentra alg\u00fan error, tiene una sugerencia y/o comentario por favor notificarlo a daniel.sanmartinr@usm.cl</p>"},{"location":"index.html#creditos","title":"Cr\u00e9ditos","text":"<p>Material desarrollado, revisado y mejorado por:</p> <ul> <li>Cristopher Arenas</li> <li>Sergio Campos</li> <li>Nicolas G\u00e1lvez</li> <li>Ignacio Jorquera</li> <li>Federico Meza</li> <li>Andrea V\u00e1squez</li> <li>Daniel San Mart\u00edn</li> </ul>"},{"location":"00_Intro_Programacion.html","title":"Introducci\u00f3n","text":"<p>Un algoritmo es una secuencia finita y precisa de pasos para resolver un problema.</p> <p>Entonces, \u00bfqu\u00e9 es un problema?</p> <p>Un problema es la necesidad de transformar un estado inicial en un estado final, respetando ciertas restricciones.</p> <p>Los problemas involucran datos de entrada en el estado inical y la soluci\u00f3n contiene datos de salida en el estado final. Adem\u00e1s, probablemente involucre otros datos intermedios que son relevantes.</p> <ul> <li>Dado un conjunto de n\u00fameros, determinar los n\u00fameros ordenados de menor a mayor.</li> <li>Dado un conjunto de ciudades, encontrar el camino m\u00e1s corto que recorre las ciudades.</li> <li>Dado un mensaje email, encontrar la probabilidad de que sea spam.</li> <li>...</li> </ul>          Mi madre dice:         \"Cari\u00f1o, anda al s\u00faper y me traes una botella de leche, y si tienen huevos, compra seis\"         Cuando vuelvo me pregunta         \"\u00bfPor qu\u00e9 trajiste seis botellas de leche?\"         Respondo         \"Porque hab\u00eda huevos\"      <p>Para poder resolver un problema se debe comprenderlo bien, y ser capaces de formalizarlo de alguna manera. De lo contrario, corremos el riesgo de terminar resolviendo el problema equivocado.</p> <p>En este proceso se debe definir el estado final al que se quiere llegar. Esto se logra pensando c\u00f3mo se ver\u00eda una soluci\u00f3n.</p> <p>En esta etapa es importante concentrarse en el qu\u00e9 y no en el c\u00f3mo.</p> <p>Volviendo a los algoritmos... Un algoritmo es una secuencia finita y precisa de pasos para resolver un problema.</p> <p>Una vez especificado el problema, hay que tratar de resoverlo pero \u00bfde qu\u00e9 manera se puede expresar la secuencia de instrucciones?</p> <ul> <li>Lenguaje natural</li> <li>Pseudoc\u00f3digo</li> <li>Diagramas de Flujo</li> <li>Lenguajes de Bloques</li> </ul> <p>Definici\u00f3n: un n\u00famero natural <code>n</code> es primo si tiene solamente como divisores a 1 y a si mismo. En caso contrario es un n\u00famero compuesto.</p> <p>Buscar alg\u00fan valor <code>d</code> que est\u00e9 entre <code>2</code> y <code>n-1</code> que sea divisor de <code>n</code>.</p> <p>Si existe por lo menos uno de estos valores, entonces <code>n</code> es compuesto; en caso contrario, es primo.</p> <p>Las instrucciones del algoritmo pueden expresarse:</p> <ul> <li>Secuencialmente</li> <li>Tomando decisiones</li> <li>En repeticiones o ciclos</li> </ul>"},{"location":"00_Intro_Programacion.html#introduccion-a-la-programacion","title":"Introducci\u00f3n a la Programaci\u00f3n\u00b6","text":""},{"location":"00_Intro_Programacion.html#algoritmos","title":"Algoritmos\u00b6","text":""},{"location":"00_Intro_Programacion.html#problemas","title":"Problemas\u00b6","text":""},{"location":"00_Intro_Programacion.html#ejemplos-de-problemas","title":"Ejemplos de Problemas\u00b6","text":""},{"location":"00_Intro_Programacion.html#el-problema-de-la-ambiguedad","title":"El problema de la ambig\u00fcedad\u00b6","text":""},{"location":"00_Intro_Programacion.html#comprension-del-problema","title":"Comprensi\u00f3n del Problema\u00b6","text":""},{"location":"00_Intro_Programacion.html#formalizacion-del-problema","title":"Formalizaci\u00f3n del Problema\u00b6","text":""},{"location":"00_Intro_Programacion.html#problema-ejemplo","title":"Problema Ejemplo:\u00b6","text":"<p>Determine si un n\u00famero es primo o compuesto.</p>"},{"location":"00_Intro_Programacion.html#lenguaje-natural","title":"Lenguaje natural\u00b6","text":""},{"location":"00_Intro_Programacion.html#pseudocodigo","title":"Pseudoc\u00f3digo\u00b6","text":"<pre><code>leer n\nes_primo = verdadero\nd = 2\n</code></pre> <pre><code>mientras d sea menor que n:\n    si n es divisible por d:\n        es_primo = falso\n    d = d + 1\n</code></pre> <pre><code>si es_primo es verdadero:\n    escribir \"n es primo\"\nsi no:\n    escribir \"n es compuesto\"\n</code></pre>"},{"location":"00_Intro_Programacion.html#diagrama-de-flujo","title":"Diagrama de Flujo\u00b6","text":""},{"location":"00_Intro_Programacion.html#estructura-de-un-algoritmo","title":"Estructura de un algoritmo\u00b6","text":""},{"location":"01_Secuenciales.html","title":"Secuenciales","text":"<p>Python es lenguage de programaci\u00f3n cuya ejecuci\u00f3n es realizada a trav\u00e9s de un interprete. \u00c9ste interprete lee c\u00f3digo desde:</p> <ul> <li>La consola de Python.</li> <li>Archivos de texto (con extensi\u00f3n .py)</li> </ul> <p>En esta clase nos centraremos mayoritariamente en la consola de python.</p> In\u00a0[56]: Copied! <pre>1\n</pre> 1 Out[56]: <pre>1</pre> In\u00a0[57]: Copied! <pre>+135\n</pre>  +135 Out[57]: <pre>135</pre> In\u00a0[58]: Copied! <pre>-124\n</pre> -124 Out[58]: <pre>-124</pre> In\u00a0[59]: Copied! <pre>-0.36\n</pre> -0.36 Out[59]: <pre>-0.36</pre> In\u00a0[60]: Copied! <pre>1.0\n</pre> 1.0 Out[60]: <pre>1.0</pre> In\u00a0[61]: Copied! <pre>6.02e23\n</pre> 6.02e23 Out[61]: <pre>6.02e+23</pre> In\u00a0[62]: Copied! <pre>True\n</pre> True Out[62]: <pre>True</pre> In\u00a0[63]: Copied! <pre>False\n</pre> False Out[63]: <pre>False</pre> In\u00a0[64]: Copied! <pre>\"hola\"\n</pre> \"hola\" Out[64]: <pre>'hola'</pre> In\u00a0[65]: Copied! <pre>'hola'\n</pre> 'hola' Out[65]: <pre>'hola'</pre> In\u00a0[66]: Copied! <pre>\"Let's Go!\"\n</pre> \"Let's Go!\" Out[66]: <pre>\"Let's Go!\"</pre> In\u00a0[67]: Copied! <pre>'Ella dijo \"Hola\"'\n</pre> 'Ella dijo \"Hola\"' Out[67]: <pre>'Ella dijo \"Hola\"'</pre> <p>Expresi\u00f3n: combinaci\u00f3n de valores que pueden ser evaluados y entregan un resultado. Pueden estar formados por:</p> <ul> <li>Valores literales</li> <li>Variables</li> <li>Operadores</li> <li>Llamadas a funciones</li> </ul> <p>Operador: s\u00edmbolo en una expresi\u00f3n que representa una operaci\u00f3n aplicada a los valores sobre los que act\u00faa.</p> <p>Operan sobre valores num\u00e9ricos y entregan un valor num\u00e9rico como resultado. Pueden ser:</p> <ul> <li>Operadores binarios</li> <li>Operadores unarios</li> </ul> In\u00a0[68]: Copied! <pre>3+2\n</pre> 3+2 Out[68]: <pre>5</pre> In\u00a0[69]: Copied! <pre>8-5\n</pre> 8-5 Out[69]: <pre>3</pre> In\u00a0[70]: Copied! <pre>8-5.0\n</pre> 8-5.0 Out[70]: <pre>3.0</pre> In\u00a0[71]: Copied! <pre>1/2\n</pre> 1/2 Out[71]: <pre>0.5</pre> In\u00a0[72]: Copied! <pre>1//2\n</pre> 1//2 Out[72]: <pre>0</pre> In\u00a0[73]: Copied! <pre>5%2\n</pre> 5%2 Out[73]: <pre>1</pre> In\u00a0[74]: Copied! <pre>2**2\n</pre> 2**2 Out[74]: <pre>4</pre> In\u00a0[75]: Copied! <pre>+3\n</pre> +3 Out[75]: <pre>3</pre> In\u00a0[76]: Copied! <pre>-5.0\n</pre> -5.0 Out[76]: <pre>-5.0</pre> <p>Algunos ejemplos</p> <p>Valor absoluto $|x|$</p> In\u00a0[77]: Copied! <pre>abs(4-5)\n</pre> abs(4-5) Out[77]: <pre>1</pre> <p>Redondear</p> In\u00a0[78]: Copied! <pre>round(2.456)\n</pre> round(2.456) Out[78]: <pre>2</pre> <p>Exponencial $e^x$</p> In\u00a0[79]: Copied! <pre>from math import exp\nexp(1)\n</pre> from math import exp exp(1) Out[79]: <pre>2.718281828459045</pre> <p>Ra\u00edz cuadrada $\\sqrt{x}$</p> In\u00a0[80]: Copied! <pre>import math\nmath.sqrt(36)\n</pre> import math math.sqrt(36) Out[80]: <pre>6.0</pre> <p><code>randint(a,b)</code> entrega un entero aleatorio entre $[a,b]$</p> In\u00a0[81]: Copied! <pre>from random import randint\nrandint(1,10)\n</pre> from random import randint randint(1,10) Out[81]: <pre>5</pre> <p>Las expresiones se eval\u00faan siguiendo reglas de precedencia que resuelven las ambig\u00fcedades. La precedencia de operadores, de mayor a menor, es la siguiente:</p> <ol> <li><code>(, )</code> (parentesis)</li> </ol> <ul> <li><code>abs()</code>, <code>sqrt()</code>, <code>randint()</code> (llamada a funciones)</li> <li><code>**</code></li> <li><code>+x</code>, <code>-x</code> (unario)</li> <li><code>*</code>, <code>/</code>, <code>//</code>, <code>%</code></li> <li><code>+</code>, <code>-</code></li> </ul> <p>El operador <code>**</code> es asociativo por la derecha. Ejemplo:</p> In\u00a0[82]: Copied! <pre>2**3**2\n</pre> 2**3**2 Out[82]: <pre>512</pre> <p>Los operadores <code>*</code>, <code>/</code> y <code>//</code> lo son por la izquierda. Ejemplo:</p> In\u00a0[83]: Copied! <pre>24/4/2\n</pre> 24/4/2 Out[83]: <pre>3.0</pre> In\u00a0[84]: Copied! <pre>int(3.5)\n</pre> int(3.5) Out[84]: <pre>3</pre> In\u00a0[85]: Copied! <pre>float(\"1\")\n</pre> float(\"1\") Out[85]: <pre>1.0</pre> In\u00a0[86]: Copied! <pre>str(25)\n</pre> str(25) Out[86]: <pre>'25'</pre> In\u00a0[87]: Copied! <pre>bool(0.0)\n</pre> bool(0.0) Out[87]: <pre>False</pre> In\u00a0[88]: Copied! <pre>int(\"hola\")\n</pre> int(\"hola\") <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n/tmp/ipython-input-754444761.py in &lt;cell line: 0&gt;()\n----&gt; 1 int(\"hola\")\n\nValueError: invalid literal for int() with base 10: 'hola'</pre> <ul> <li>Primero se eval\u00faa la expresi\u00f3n a la derecha del signo igual.</li> <li>El resultado de la evaluaci\u00f3n es asignado a la variable a la izquierda del signo igual.</li> </ul> <p>\u00bfQu\u00e9 valor tienen las siguiente variables?</p> In\u00a0[89]: Copied! <pre>a = 4 + 5\nb = a + 4\na = 2\nd = a - 3\ne = e + 1\n</pre> a = 4 + 5 b = a + 4 a = 2 d = a - 3 e = e + 1 <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/tmp/ipython-input-4031468043.py in &lt;cell line: 0&gt;()\n      3 a = 2\n      4 d = a - 3\n----&gt; 5 e = e + 1\n\nNameError: name 'e' is not defined</pre> In\u00a0[90]: Copied! <pre>dato = input()\n</pre> dato = input() <pre>Hola\n</pre> In\u00a0[91]: Copied! <pre>nombre = input(\"Ingrese su nombre: \")\n</pre> nombre = input(\"Ingrese su nombre: \") <pre>Ingrese su nombre: Juan\n</pre> <p>\u00bfQu\u00e9 tipo de dato es la variable <code>nombre</code>?</p> In\u00a0[92]: Copied! <pre>nombre\n</pre> nombre Out[92]: <pre>'Juan'</pre> In\u00a0[93]: Copied! <pre>print(\"Hola mundo\")\n</pre> print(\"Hola mundo\") <pre>Hola mundo\n</pre> In\u00a0[94]: Copied! <pre>a = 6\nx = a**2\n</pre> a = 6 x = a**2 In\u00a0[95]: Copied! <pre>print(a, 'al cuadrado es', x)\n</pre> print(a, 'al cuadrado es', x) <pre>6 al cuadrado es 36\n</pre> In\u00a0[96]: Copied! <pre>print(a, x)\n</pre> print(a, x) <pre>6 36\n</pre> In\u00a0[97]: Copied! <pre>print(a)\nprint(x)\n</pre> print(a) print(x) <pre>6\n36\n</pre> In\u00a0[98]: Copied! <pre>#El siguiente codigo muestra la suma de 2 + 2 en pantalla\nprint(2 + 2)\n</pre> #El siguiente codigo muestra la suma de 2 + 2 en pantalla print(2 + 2) <pre>4\n</pre> In\u00a0[99]: Copied! <pre>nombre = input(\"Ingrese nombre: \")\nprint(\"Yo soy\", nombre)\n</pre> nombre = input(\"Ingrese nombre: \") print(\"Yo soy\", nombre) <pre>Ingrese nombre: Juanita\nYo soy Juanita\n</pre> In\u00a0[100]: Copied! <pre>f = float(input('Temp. en Farenheit: '))\nc = (5/9) * (f-32)\nprint('El equivalente en Celsius es aproximadamente:', int(round(c)))\n</pre> f = float(input('Temp. en Farenheit: ')) c = (5/9) * (f-32) print('El equivalente en Celsius es aproximadamente:', int(round(c))) <pre>Temp. en Farenheit: 20\nEl equivalente en Celsius es aproximadamente: -7\n</pre> In\u00a0[101]: Copied! <pre>n = 8\nm = 0\nprint('Listo')\nprint(n/m)\n</pre> n = 8 m = 0 print('Listo') print(n/m) <pre>Listo\n</pre> <pre>\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\n/tmp/ipython-input-1108107493.py in &lt;cell line: 0&gt;()\n      2 m = 0\n      3 print('Listo')\n----&gt; 4 print(n/m)\n\nZeroDivisionError: division by zero</pre> In\u00a0[102]: Copied! <pre>2*(3+4))\n</pre> 2*(3+4)) <pre>\n  File \"/tmp/ipython-input-2087050023.py\", line 1\n    2*(3+4))\n           ^\nSyntaxError: unmatched ')'\n</pre> In\u00a0[103]: Copied! <pre>n = 6\nprint(n)\nn + 2 = 7\nprint(n)\n</pre> n = 6 print(n) n + 2 = 7 print(n) <pre>\n  File \"/tmp/ipython-input-1892509457.py\", line 3\n    n + 2 = 7\n    ^\nSyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?\n</pre> In\u00a0[104]: Copied! <pre>x = 20\nprint(5 * x)\nprint(5 * y)\n</pre> x = 20 print(5 * x) print(5 * y) <pre>100\n</pre> <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n/tmp/ipython-input-1367454294.py in &lt;cell line: 0&gt;()\n      1 x = 20\n      2 print(5 * x)\n----&gt; 3 print(5 * y)\n\nNameError: name 'y' is not defined</pre> <p>Los identificadores son los nombres con los que nombramos variables y otros elementos de nuestros programas. En general, como una buena pr\u00e1ctica de programaci\u00f3n, queremos que nuestras variables y funciones tengan nombres representativos, que indique por s\u00ed mismos su prop\u00f3sito. Por ejemplo, una variable para guardar la edad de una persona deber\u00eda llamarse <code>edad</code> y no <code>x</code>, a pesar de que el programa funcionar\u00e1 correctamente con cualquiera de las dos.</p> <p>Python tiene reglas simples para definir identificadores:</p> <ol> <li>Un identificador puede contener cualquier combinaci\u00f3n de letras (may\u00fasculas o min\u00fasculas), d\u00edgitos y caracteres de gui\u00f3n bajo.</li> <li>El primer caracter debe ser una letra. Las letras may\u00fasculas y las min\u00fasculas se consideran diferentes, por lo que edad, Edad, y EDAD, son todos identificadores distintos.</li> </ol> <p>Como consecuencia de las reglas 1. y 2., no es posible utilizar espacios en blanco en un identificador. Si queremos tener un identificador compuesto por varias palabras utilizamos guiones bajos para separarlas o una combinaci\u00f3n de min\u00fasculas y may\u00fasculas para destacar las palabras. Por ejemplo: <code>nombre_cliente</code> o <code>nombreCliente</code>.</p> In\u00a0[106]: Copied! <pre>n = int(input('Ingrese un n\u00famero de 3 d\u00edgitos: '))\nsuma = n%10 + (n//10)%10 + n//100\nprint(suma)\n</pre> n = int(input('Ingrese un n\u00famero de 3 d\u00edgitos: ')) suma = n%10 + (n//10)%10 + n//100 print(suma) <pre>Ingrese un n\u00famero de 3 d\u00edgitos: 123\n6\n</pre> In\u00a0[108]: Copied! <pre>n = int(input('Ingresa un numero de 3 digitos iguales: '))\nsuma = n%10 + (n//10)%10 + n//100\nresultado = n//suma\nprint(resultado)\n</pre> n = int(input('Ingresa un numero de 3 digitos iguales: ')) suma = n%10 + (n//10)%10 + n//100 resultado = n//suma print(resultado) <pre>Ingresa un numero de 3 digitos iguales: 111\n37\n</pre> In\u00a0[109]: Copied! <pre>pi = 3.1415\nradio = float(input('Ingrese el radio de un c\u00edrculo: '))\nprint(\"El \u00e1rea de la circunferencia es\", pi*(radio**2))\n</pre> pi = 3.1415 radio = float(input('Ingrese el radio de un c\u00edrculo: ')) print(\"El \u00e1rea de la circunferencia es\", pi*(radio**2)) <pre>Ingrese el radio de un c\u00edrculo: 2\nEl \u00e1rea de la circunferencia es 12.566\n</pre> <pre>a = 94567\nb = 28954\nc = 36532\nd = 11404\ne = 40613\na = a//10000\nb = (b//1000)%10\nc = (c//100)%10\nd = (d//10)%10\ne = e%10\nprint (a,b,c,d,e)\n</pre> <p>Soluci\u00f3n ruteo:</p> a b c d e 94567 28954 36532 11404 40613 9 8 5 0 3 <p>Para calcularlo puede utilizar la f\u00f3rmula de Her\u00f3n:</p> <p>\\begin{equation}     A = \\sqrt{s\\,(s-a)(s-b)(s-c)}, \\end{equation}</p> <p>donde $a$, $b$ y $c$ son las longitudes de cada lado y $s=\\dfrac{a+b+c}{2}$ es el semiper\u00edmetro.</p> In\u00a0[110]: Copied! <pre>l1 = float(input(\"Ingrese longitud de lado 1: \"))\nl2 = float(input(\"Ingrese longitud de lado 2: \"))\nl3 = float(input(\"Ingrese longitud de lado 3: \"))\ns = (l1 + l2 + l3) / 2 # semiper\u00edmetro\n\nd1 = s-l1 # diferencia1\nd2 = s-l2 # diferencia2\nd3 = s-l3 # diferencia3\nprod = s*d1*d2*d3 # producto de diferencias y semiperimetro\narea = prod ** (1 / 2) # ra\u00edz cuadrada\n# \u00bfc\u00f3mo se podr\u00eda hacer lo mismo utilizando math.sqrt()?\n\nprint(\"El \u00e1rea del tri\u00e1ngulo es\", area)\n</pre> l1 = float(input(\"Ingrese longitud de lado 1: \")) l2 = float(input(\"Ingrese longitud de lado 2: \")) l3 = float(input(\"Ingrese longitud de lado 3: \")) s = (l1 + l2 + l3) / 2 # semiper\u00edmetro  d1 = s-l1 # diferencia1 d2 = s-l2 # diferencia2 d3 = s-l3 # diferencia3 prod = s*d1*d2*d3 # producto de diferencias y semiperimetro area = prod ** (1 / 2) # ra\u00edz cuadrada # \u00bfc\u00f3mo se podr\u00eda hacer lo mismo utilizando math.sqrt()?  print(\"El \u00e1rea del tri\u00e1ngulo es\", area) <pre>Ingrese longitud de lado 1: 3\nIngrese longitud de lado 2: 4\nIngrese longitud de lado 3: 5\nEl \u00e1rea del tri\u00e1ngulo es 6.0\n</pre>"},{"location":"01_Secuenciales.html#programas-secuenciales","title":"Programas Secuenciales\u00b6","text":""},{"location":"01_Secuenciales.html#introduccion-a-python-3x","title":"Introducci\u00f3n a Python 3.X\u00b6","text":""},{"location":"01_Secuenciales.html#tipos-de-datos","title":"Tipos de Datos\u00b6","text":"<p>Python opera sobre datos de distintos tipos. Cada tipo de datos tiene reglas que establecen la forma en que se deben escribir los valores literales (constantes) de ese tipo. Adem\u00e1s, cada tipo de datos cuentan con una serie de operadores y funciones que se pueden aplicar. En algunos casos es posible convertir un dato particular de un tipo a otro, ya sea de forma impl\u00edcita o expl\u00edcita.</p>"},{"location":"01_Secuenciales.html#numeros-enteros","title":"N\u00fameros enteros\u00b6","text":"<p>Tipo <code>int</code> (integer)</p>"},{"location":"01_Secuenciales.html#numeros-reales","title":"N\u00fameros Reales\u00b6","text":"<p>Tipo <code>float</code> (floating point)</p>"},{"location":"01_Secuenciales.html#valores-logicos","title":"Valores L\u00f3gicos\u00b6","text":"<p>Tipo <code>bool</code></p>"},{"location":"01_Secuenciales.html#texto","title":"Texto\u00b6","text":"<p>Tipo <code>str</code> (strings)</p>"},{"location":"01_Secuenciales.html#expresiones-y-operadores","title":"Expresiones y operadores\u00b6","text":""},{"location":"01_Secuenciales.html#operadores-aritmeticos","title":"Operadores Aritm\u00e9ticos\u00b6","text":""},{"location":"01_Secuenciales.html#operadores-binarios","title":"Operadores binarios\u00b6","text":"<ul> <li>Suma (<code>+</code>)</li> <li>Resta (<code>-</code>)</li> <li>Multiplicaci\u00f3n (<code>*</code>)</li> <li>Divisi\u00f3n (<code>/</code>)</li> <li>Divisi\u00f3n Entera (<code>//</code>)</li> <li>M\u00f3dulo o resto de la divisi\u00f3n (<code>%</code>)</li> <li>Potencia (<code>**</code>)</li> </ul>"},{"location":"01_Secuenciales.html#operadores-unarios","title":"Operadores unarios\u00b6","text":"<ul> <li>Positivo (<code>+</code>)</li> <li>Negativo (<code>-</code>)</li> </ul>"},{"location":"01_Secuenciales.html#llamados-a-funciones-y-uso-de-biblioteca","title":"Llamados a funciones y uso de biblioteca\u00b6","text":"<p>Algunas funciones se encuentran incorporadas al n\u00facleo del lenguaje Python y se pueden utilizar directamente (<code>round</code>, <code>abs</code>). En otros casos, las funciones est\u00e1n agrupadas en colecciones denominadas bibliotecas (<code>math</code>, <code>random</code>), y es necesario primero importarlas desde la biblioteca antes de poder utilizarlas.</p>"},{"location":"01_Secuenciales.html#ejemplos-de-funciones-de-la-biblioteca-math","title":"Ejemplos de funciones de la biblioteca <code>math</code>\u00b6","text":""},{"location":"01_Secuenciales.html#ejemplos-de-funciones-de-la-biblioteca-random","title":"Ejemplos de funciones de la biblioteca <code>random</code>\u00b6","text":""},{"location":"01_Secuenciales.html#precedencia-de-operadores","title":"Precedencia de Operadores\u00b6","text":""},{"location":"01_Secuenciales.html#asociatividad-de-operadores","title":"Asociatividad de Operadores\u00b6","text":""},{"location":"01_Secuenciales.html#conversion-entre-tipos-de-datos-casting","title":"Conversi\u00f3n entre tipos de datos (casting)\u00b6","text":""},{"location":"01_Secuenciales.html#asignacion-de-variables","title":"Asignaci\u00f3n de variables\u00b6","text":"<p>Una asignaci\u00f3n de variables tiene la forma:</p>  &lt;variable&gt; = &lt;expresion&gt;"},{"location":"01_Secuenciales.html#entrada-de-datos","title":"Entrada de datos\u00b6","text":""},{"location":"01_Secuenciales.html#salida-de-datos","title":"Salida de datos\u00b6","text":""},{"location":"01_Secuenciales.html#comentarios","title":"Comentarios\u00b6","text":"<ul> <li>Son textos que ser\u00e1n ignorados por el int\u00e9rprete de Python</li> <li>Se utilizan para explicar el c\u00f3digo y hacerlo m\u00e1s f\u00e1cil de entender</li> <li>Existen dos tipos de comentario:<ol> <li>Los que se escriben a la derecha de un caracter <code>#</code><ul> <li>Cualquier texto que aparezca a la derecha de un caracter <code>#</code> ser\u00e1 ignorado</li> <li>Terminan cuando termina la l\u00ednea</li> </ul> </li> <li>Comentarios de m\u00faltiples l\u00edneas<ul> <li>Se encierran entre tres comillas al inicio y final: <code>'''</code></li> <li>Pueden comprender varias l\u00edneas</li> </ul> </li> </ol> </li> </ul>"},{"location":"01_Secuenciales.html#ejemplos","title":"Ejemplos\u00b6","text":""},{"location":"01_Secuenciales.html#ejemplo-1","title":"Ejemplo 1\u00b6","text":"<p>Solicitar el nombre del usuario e imprimir el mensaje <code>\"Yo soy nombre\"</code>.</p>"},{"location":"01_Secuenciales.html#ejemplo-2","title":"Ejemplo 2\u00b6","text":"<p>Desarrollar un programa que convierta temperatura de Farenheit a Celsius. La f\u00f3rmula de conversi\u00f3n es la siguiente:</p> <p>\\begin{equation}     C = \\frac{5}{9}\\,(F - 32) \\end{equation}</p>"},{"location":"01_Secuenciales.html#algunos-errores","title":"Algunos errores\u00b6","text":""},{"location":"01_Secuenciales.html#error-de-ejecucion-runtime-error","title":"Error de ejecuci\u00f3n (runtime error)\u00b6","text":"<p>Un error de ejecuci\u00f3n ocurre cuando el programa termina abruptamente por una condici\u00f3n que ocurre y que le impide continuar ejecut\u00e1ndose. Por ejemplo, cuando se produce un error aritm\u00e9tico al intentar hacer una divisi\u00f3n por cero.</p>"},{"location":"01_Secuenciales.html#error-de-sintaxis-syntax-error","title":"Error de sintaxis (syntax error)\u00b6","text":"<p>Un error de sintaxis ocurre cuando nos equivocamos en la forma (sintaxis) de escribir una instrucci\u00f3n de nuestro programa. Por ejemplo, cuando no cerramos la cantidad adecuada de par\u00e9ntesis, olvidamos una coma, escribimos mal una instrucci\u00f3n de Python.</p>"},{"location":"01_Secuenciales.html#errores-de-nombre-name-error","title":"Errores de nombre (name error)\u00b6","text":"<p>Un error de nombre ocurre cuando se intenta acceder al contenido de una variable que no ha sido inicializada y que por lo tanto no existe. Tambi\u00e9n puede ocurrir al intentar utilizar una funci\u00f3n que no ha sido definida o importada desde una biblioteca.</p>"},{"location":"01_Secuenciales.html#reglas-para-definir-identificadores","title":"Reglas para definir identificadores\u00b6","text":""},{"location":"01_Secuenciales.html#ejercicios","title":"Ejercicios\u00b6","text":""},{"location":"01_Secuenciales.html#ejercicio-1","title":"Ejercicio 1\u00b6","text":"<p>Escribir una expresi\u00f3n para sumar los d\u00edgitos de un n\u00famero entero de $3$ d\u00edgitos, que se ingrese por pantalla:</p>"},{"location":"01_Secuenciales.html#ejercicio-2","title":"Ejercicio 2\u00b6","text":"<p>Modifique el resultado anterior para que reciba un entero con $3$ d\u00edgitos iguales y retorne el resultado <code>n//suma</code>.</p>"},{"location":"01_Secuenciales.html#ejercicio-3","title":"Ejercicio 3\u00b6","text":"<p>Realice un programa que determine el \u00e1rea de un c\u00edrculo a partir de su radio.</p>"},{"location":"01_Secuenciales.html#ejercicio-4","title":"Ejercicio 4\u00b6","text":"<p>RUTEO: Rutee el siguiente programa e indique que es lo que imprime. Cada vez que el valor de una variable cambie, ponga su valor en una nueva fila de la tabla. La tabla tiene filas de sobra:</p>"},{"location":"01_Secuenciales.html#ejercicio-5","title":"Ejercicio 5\u00b6","text":"<p>Realice un programa que calcule el \u00e1rea de un tri\u00e1ngulo a partir de las longitudes de sus lados.</p>"},{"location":"02_Condicionales.html","title":"Condicionales","text":"<ul> <li>Igual a (<code>==</code>)</li> <li>Distinto a (<code>!=</code>)</li> <li>Mayor que (<code>&gt;</code>)</li> <li>Menor que (<code>&lt;</code>)</li> <li>Mayor o igual que (<code>&gt;=</code>)</li> <li>Menor o igual que (<code>&lt;=</code>)</li> </ul> In\u00a0[\u00a0]: Copied! <pre>5 == 3\n</pre> 5 == 3 Out[\u00a0]: <pre>False</pre> In\u00a0[\u00a0]: Copied! <pre>4 &gt; 7\n</pre> 4 &gt; 7 Out[\u00a0]: <pre>False</pre> In\u00a0[\u00a0]: Copied! <pre>4 != 3\n</pre> 4 != 3 Out[\u00a0]: <pre>True</pre> In\u00a0[\u00a0]: Copied! <pre>\"casa\" == 'casa'\n</pre> \"casa\" == 'casa' Out[\u00a0]: <pre>True</pre> In\u00a0[\u00a0]: Copied! <pre>3 &gt; 3\n</pre> 3 &gt; 3 Out[\u00a0]: <pre>False</pre> In\u00a0[\u00a0]: Copied! <pre>\"a\" &lt; \"z\"\n</pre> \"a\" &lt; \"z\" Out[\u00a0]: <pre>True</pre> <ul> <li>Conjunci\u00f3n l\u00f3gica <code>and</code> - False si cualquiera de sus operandos es False, True si todos son True.</li> <li>Disyunci\u00f3n l\u00f3gica <code>or</code>  - True si cualquiera de sus operandos es True, False si todos son False.</li> <li>Negaci\u00f3n l\u00f3gica <code>not</code>   - True cuando el operando es False, y viceversa.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>3 == 5 and False\n</pre> 3 == 5 and False Out[\u00a0]: <pre>False</pre> In\u00a0[\u00a0]: Copied! <pre>3!=5 or False\n</pre> 3!=5 or False Out[\u00a0]: <pre>True</pre> In\u00a0[\u00a0]: Copied! <pre>not True\n</pre> not True Out[\u00a0]: <pre>False</pre> In\u00a0[\u00a0]: Copied! <pre>(False or (not False)) and (not True)\n</pre> (False or (not False)) and (not True) Out[\u00a0]: <pre>False</pre> In\u00a0[\u00a0]: Copied! <pre>((3 + 4) &lt; 2) or ((2**4) &gt;= 4)\n</pre> ((3 + 4) &lt; 2) or ((2**4) &gt;= 4) Out[\u00a0]: <pre>True</pre> In\u00a0[\u00a0]: Copied! <pre>((3 + 4) &lt; 2) and ((2**4) &gt;= 4)\n</pre> ((3 + 4) &lt; 2) and ((2**4) &gt;= 4) Out[\u00a0]: <pre>False</pre> In\u00a0[\u00a0]: Copied! <pre>nota = int(input(\"Ingrese su nota: \"))\nif nota &gt;= 55:\n    print(\"Felicitaciones!!!\")\n</pre> nota = int(input(\"Ingrese su nota: \")) if nota &gt;= 55:     print(\"Felicitaciones!!!\") <pre>Ingrese su nota: 55\nFelicitaciones!!!\n</pre> In\u00a0[\u00a0]: Copied! <pre>nota = int(input(\"Ingrese su nota: \"))\nif nota &lt; 55:\n    print(\"Lamentablemente Ud. ha reprobado.\")\n</pre> nota = int(input(\"Ingrese su nota: \")) if nota &lt; 55:     print(\"Lamentablemente Ud. ha reprobado.\") <pre>Ingrese su nota: 54\nLamentablemente Ud. ha reprobado.\n</pre> In\u00a0[\u00a0]: Copied! <pre>edad = int(input(\"Cual es su edad? \"))\nif edad &lt; 18:\n    print(\"Usted es menor de edad\")\nelse:\n    print(\"Usted es adulto\")\n</pre> edad = int(input(\"Cual es su edad? \")) if edad &lt; 18:     print(\"Usted es menor de edad\") else:     print(\"Usted es adulto\") <pre>Cual es su edad? 18\nUsted es adulto\n</pre> <p>\u00bfQu\u00e9 mensajes se muestran en el siguiente c\u00f3digo si ingresamos...?</p> <ol> <li><code>n = 15</code></li> <li><code>n = 20</code></li> </ol> In\u00a0[\u00a0]: Copied! <pre>n = int(input(\"Ingrese un numero: \"))\nif n % 2 == 0:\n    print(\"El numero es par\")\n    print(\"La mitad del numero es\", n / 2)\nelse:\n    print(\"El numero es impar\")\n    print(\"El sucesor del numero es\", n + 1)\nprint(\"Fin\")\n</pre> n = int(input(\"Ingrese un numero: \")) if n % 2 == 0:     print(\"El numero es par\")     print(\"La mitad del numero es\", n / 2) else:     print(\"El numero es impar\")     print(\"El sucesor del numero es\", n + 1) print(\"Fin\") <pre>Ingrese un numero: 15\nEl numero es impar\nEl sucesor del numero es 16\nFin\n</pre> <ol> <li>Escriba un programa que califique el rendimiento del alumno en una asignatura seg\u00fan la nota obtenida.</li> </ol> In\u00a0[\u00a0]: Copied! <pre>nota = int(input(\"Ingrese su nota: \"))\nif nota &gt;= 80:\n    print(\"Usted es un alumno destacado.\")\nelif nota &gt;= 65:\n    print(\"Usted ha aprobado.\")\nelif nota &gt;= 55:\n    print(\"Usted aprob\u00f3 con algunas dificultades.\")\nelif nota &gt;= 45:\n    print(\"Con un poco mas de empe\u00f1o hubiese aprobado.\")\nelse:\n    print(\"Nos vemos el pr\u00f3ximo semestre.\")\n</pre> nota = int(input(\"Ingrese su nota: \")) if nota &gt;= 80:     print(\"Usted es un alumno destacado.\") elif nota &gt;= 65:     print(\"Usted ha aprobado.\") elif nota &gt;= 55:     print(\"Usted aprob\u00f3 con algunas dificultades.\") elif nota &gt;= 45:     print(\"Con un poco mas de empe\u00f1o hubiese aprobado.\") else:     print(\"Nos vemos el pr\u00f3ximo semestre.\") <pre>Ingrese su nota: 55\nUsted aprob\u00f3 con algunas dificultades.\n</pre> <ol> <li>Considerar la siguiente tabla que muestra la tasa de impuesto a pagar por una persona seg\u00fan su sueldo.</li> </ol> Sueldo Tasa de impuesto menos de 1000 0% 1000 \u2264 sueldo &lt; 2000 5% 2000 \u2264 sueldo &lt; 4000 10% 4000 o m\u00e1s 12% <p>Un ejemplo de como se calcula el impuesto ser\u00eda el siguiente:</p> In\u00a0[\u00a0]: Copied! <pre>sueldo = int(input(\"Ingrese su sueldo: \"))\nif sueldo &lt; 1000:\n    print(\"caso 1\")\n    tasa = 0.00\nelif sueldo &lt; 2000: # 1000 &lt;= sueldo &lt; 2000?\n    print(\"caso 2\")\n    tasa = 0.05\nelif sueldo &lt; 4000: # 2000 &lt;= sueldo &lt; 4000\n    print(\"caso 3\")\n    tasa = 0.10\nelse:\n    print(\"caso falso\")\n    tasa = 0.12\nprint(\"Usted debe pagar\", int(tasa*sueldo), \"de impuesto.\")\n</pre> sueldo = int(input(\"Ingrese su sueldo: \")) if sueldo &lt; 1000:     print(\"caso 1\")     tasa = 0.00 elif sueldo &lt; 2000: # 1000 &lt;= sueldo &lt; 2000?     print(\"caso 2\")     tasa = 0.05 elif sueldo &lt; 4000: # 2000 &lt;= sueldo &lt; 4000     print(\"caso 3\")     tasa = 0.10 else:     print(\"caso falso\")     tasa = 0.12 print(\"Usted debe pagar\", int(tasa*sueldo), \"de impuesto.\") <pre>Ingrese su sueldo: 800\ncaso 1\nUsted debe pagar 0 de impuesto.\n</pre> <p>Otra forma de calcular el impuesto es la siguiente:</p> In\u00a0[\u00a0]: Copied! <pre>sueldo = int(input(\"Ingrese su sueldo: \"))\nif sueldo &lt; 1000: #1000 &gt; sueldo:\n    print(\"caso 1\")\n    tasa = 0.00\nif sueldo &gt;= 1000 and sueldo &lt; 2000: #if 1000 &lt;= sueldo &lt; 2000:\n    print(\"caso 2\")\n    tasa = 0.05\nif 2000 &lt;= sueldo &lt; 4000:\n    print(\"caso 3\")\n    tasa = 0.10\nif 4000 &lt;= sueldo: #sueldo&gt;= 4000\n    print(\"caso falso\")\n    tasa = 0.12\nprint(\"Usted debe pagar\", int(tasa*sueldo), \"de impuesto.\")\n</pre> sueldo = int(input(\"Ingrese su sueldo: \")) if sueldo &lt; 1000: #1000 &gt; sueldo:     print(\"caso 1\")     tasa = 0.00 if sueldo &gt;= 1000 and sueldo &lt; 2000: #if 1000 &lt;= sueldo &lt; 2000:     print(\"caso 2\")     tasa = 0.05 if 2000 &lt;= sueldo &lt; 4000:     print(\"caso 3\")     tasa = 0.10 if 4000 &lt;= sueldo: #sueldo&gt;= 4000     print(\"caso falso\")     tasa = 0.12 print(\"Usted debe pagar\", int(tasa*sueldo), \"de impuesto.\") <pre>Ingrese su sueldo: 800\ncaso 1\nUsted debe pagar 0 de impuesto.\n</pre> <p>\u00bfEn qu\u00e9 se diferencian los dos programas anteriores?</p> In\u00a0[\u00a0]: Copied! <pre>from random import randint\n\nmoneda = randint(0, 1)\n\nif moneda == 0:\n    print(\"El lanzamiento es CARA.\")\nelse:\n    print(\"El lanzamiento es SELLO.\")\n</pre> from random import randint  moneda = randint(0, 1)  if moneda == 0:     print(\"El lanzamiento es CARA.\") else:     print(\"El lanzamiento es SELLO.\") <pre>El lanzamiento es CARA.\n</pre> In\u00a0[\u00a0]: Copied! <pre>a\u00f1o = int(input('Ingrese a\u00f1o a consultar: '))\n\nif a\u00f1o % 4 == 0:\n    if a\u00f1o % 100 == 0 and a\u00f1o % 400 != 0:\n        bisiesto = False\n    else:\n        bisiesto = True\nelse:\n    bisiesto = False\n\nprint(bisiesto)\n</pre> a\u00f1o = int(input('Ingrese a\u00f1o a consultar: '))  if a\u00f1o % 4 == 0:     if a\u00f1o % 100 == 0 and a\u00f1o % 400 != 0:         bisiesto = False     else:         bisiesto = True else:     bisiesto = False  print(bisiesto) <pre>Ingrese a\u00f1o a consultar: 2000\nTrue\n</pre> In\u00a0[\u00a0]: Copied! <pre>year=int(input('Ingrese a\u00f1o a consultar: '))\n\nif year % 400 == 0:\n    bisiesto = True\nelif year % 100 == 0:\n    bisiesto = False\nelif year % 4 == 0:\n    bisiesto = True\nelse:\n    bisiesto = False\n\nprint(bisiesto)\n</pre> year=int(input('Ingrese a\u00f1o a consultar: '))  if year % 400 == 0:     bisiesto = True elif year % 100 == 0:     bisiesto = False elif year % 4 == 0:     bisiesto = True else:     bisiesto = False  print(bisiesto) <pre>Ingrese a\u00f1o a consultar: 2000\nTrue\n</pre> <p>Soluci\u00f3n reducida con salida modificada:</p> In\u00a0[\u00a0]: Copied! <pre>a=int(input('Ingrese a\u00f1o a consultar: '))\n\nbisiesto = ((a % 4 == 0 and a % 100 != 0) or a % 400 == 0)\n\nif bisiesto:\n    print(\"El a\u00f1o\", a, \"es bisiesto.\")\nelse:\n    print(\"El a\u00f1o\", a, \"no es bisiesto.\")\n</pre> a=int(input('Ingrese a\u00f1o a consultar: '))  bisiesto = ((a % 4 == 0 and a % 100 != 0) or a % 400 == 0)  if bisiesto:     print(\"El a\u00f1o\", a, \"es bisiesto.\") else:     print(\"El a\u00f1o\", a, \"no es bisiesto.\") <pre>Ingrese a\u00f1o a consultar: 2000\nEl a\u00f1o 2000 es bisiesto.\n</pre> In\u00a0[\u00a0]: Copied! <pre>edad=int(input(\"Ingrese su edad [a\u00f1os]: \"))\npeso=float(input(\"Ingrese su peso [kg]: \"))\nalt=float(input(\"Ingrese su altura [m]: \"))\n\nIMC = peso / alt**2\n\nprint (\"Su \u00edndice de masa corporal es:\", round(IMC,2))\n\nif IMC&lt;22 and edad&lt;45:\n        print(\"Su nivel de riesgo es bajo.\")\nelif IMC&lt;22 and edad&gt;=45:\n        print(\"Su nivel de riesgo es medio.\")\nelse:\n    if edad&lt;45:\n        print(\"Su nivel de riesgo es medio.\")\n    else:\n        print(\"Su nivel de riesgo es alto.\")\n</pre> edad=int(input(\"Ingrese su edad [a\u00f1os]: \")) peso=float(input(\"Ingrese su peso [kg]: \")) alt=float(input(\"Ingrese su altura [m]: \"))  IMC = peso / alt**2  print (\"Su \u00edndice de masa corporal es:\", round(IMC,2))  if IMC&lt;22 and edad&lt;45:         print(\"Su nivel de riesgo es bajo.\") elif IMC&lt;22 and edad&gt;=45:         print(\"Su nivel de riesgo es medio.\") else:     if edad&lt;45:         print(\"Su nivel de riesgo es medio.\")     else:         print(\"Su nivel de riesgo es alto.\") <pre>Ingrese su edad [a\u00f1os]: 18\nIngrese su peso [kg]: 70\nIngrese su altura [m]: 1.7\nSu \u00edndice de masa corporal es: 24.22\nSu nivel de riesgo es medio.\n</pre> <p>Realice un ruteo, utilizando la soluci\u00f3n dise\u00f1ada en el Ejercicio 3, para los siguientes valores de entrada:</p> <ul> <li>Edad 50, peso 65 y altura 1.70.</li> </ul> edad peso alt IMC 50 65.0 1.7 22.49 <pre><code>        </code></pre> Pantalla: Su \u00edndice de masa corporal es: 22.49Su nivel de riesgo es alto. <p>\u00bfC\u00f3mo se ver\u00eda el ruteo con otros valores de entrada?</p>"},{"location":"02_Condicionales.html#condiciones-y-estructuras-condicionales","title":"Condiciones y Estructuras condicionales\u00b6","text":""},{"location":"02_Condicionales.html#operadores-relacionales-o-de-comparacion","title":"Operadores relacionales, o de comparaci\u00f3n\u00b6","text":"<p>Comparan expresiones de cualquier tipo. El resultado siempre es un valor booleano: <code>True</code> o <code>False</code>.</p>"},{"location":"02_Condicionales.html#operadores-logicos","title":"Operadores l\u00f3gicos\u00b6","text":"<p>Permiten construir expresiones que representan condiciones complejas a partir de otras expresiones booleanas.</p>"},{"location":"02_Condicionales.html#instrucciones-condicionales","title":"Instrucciones Condicionales\u00b6","text":""},{"location":"02_Condicionales.html#condicional-if-simple-o-de-un-camino","title":"Condicional <code>if</code> simple, o de un camino:\u00b6","text":"<p><code>if</code> Decide, evaluando una condici\u00f3n booleana, si se ejecuta o no una o varias instrucciones contenidas en el <code>if</code>. Si la condici\u00f3n es False, el <code>if</code> y las instrucciones que contiene son ignoradas. Las instrucciones contenidas en el <code>if</code> deben estar indentadas.</p>"},{"location":"02_Condicionales.html#sintaxis","title":"Sintaxis:\u00b6","text":"<pre>if condicion:\n    instrucciones\n</pre> <p>La Tabulaci\u00f3n/Sangr\u00eda despu\u00e9s de la instrucci\u00f3n <code>if</code> indica que cosas se realizar\u00e1n si se cumple la condici\u00f3n. Esto se llama Indentaci\u00f3n.</p>"},{"location":"02_Condicionales.html#diagrama-de-flujo-explicativo","title":"Diagrama de flujo explicativo\u00b6","text":""},{"location":"02_Condicionales.html#ejemplos","title":"Ejemplos\u00b6","text":""},{"location":"02_Condicionales.html#condicional-if-de-dos-caminos-if-else","title":"Condicional if de dos caminos: <code>if-else</code>:\u00b6","text":"<p>Decide entre dos grupos de instrucciones cu\u00e1l ejecutar, evaluando una condici\u00f3n booleana.</p> <p>El primer grupo de instrucciones indentandas se ejecutan si la condici\u00f3n es True.</p> <p>Si la condici\u00f3n es False, se ejecutan las instrucciones que se encuentran indentadas despu\u00e9s de <code>else:</code></p>"},{"location":"02_Condicionales.html#sintaxis","title":"Sintaxis:\u00b6","text":"<pre>if condicion:\n    instrucciones cuando la condicion es verdadera\nelse:\n    instrucciones cuando la condicion es falsa\n</pre>"},{"location":"02_Condicionales.html#diagrama-de-flujo-explicativo","title":"Diagrama de flujo explicativo\u00b6","text":""},{"location":"02_Condicionales.html#ejemplos","title":"Ejemplos\u00b6","text":""},{"location":"02_Condicionales.html#condicionales-if-en-cascada-if-elif-else","title":"Condicionales if en cascada: <code>if-elif-else</code>\u00b6","text":"<p>Permite definir grupos de instrucciones cuya ejecuci\u00f3n es excluyente entre s\u00ed, a partir de la evaluaci\u00f3n de distintas condiciones booleanas que ser\u00e1n evaluadas en cascada, en el orden en que aparecen.</p> <p>La primera condici\u00f3n que sea True provoca que las instrucciones asociadas se ejecuten y la instrucci\u00f3n <code>if</code> termine.</p> <p>Si ninguna condici\u00f3n es True, se ejecutan las instrucciones que vienen despu\u00e9s de <code>else:</code>, si es que aparece esta componente.</p>"},{"location":"02_Condicionales.html#sintaxis","title":"Sintaxis:\u00b6","text":"<pre>if condici\u00f3n 1:\n    instrucciones a ejecutar si condici\u00f3n 1 es verdadera\nelif condici\u00f3n 2:\n    instrucciones a ejecutar si condici\u00f3n 2 es verdadera\nelif condici\u00f3n 3:\n    instrucciones a ejecutar si condici\u00f3n 3 es verdadera\n\n\nelse:\n    instrucciones cuando ninguna condicion anterior es verdadera\n</pre> <p>La Indentaci\u00f3n despu\u00e9s de cada instrucci\u00f3n <code>elif</code> indica que cosas se realizar\u00e1n si se cumple su respectiva condici\u00f3n (consecuentemente, si no se cumplen las condiciones anteriores)</p>"},{"location":"02_Condicionales.html#diagrama-de-flujo","title":"Diagrama de flujo\u00b6","text":""},{"location":"02_Condicionales.html#ejemplos","title":"Ejemplos\u00b6","text":""},{"location":"02_Condicionales.html#ejercicios","title":"Ejercicios\u00b6","text":""},{"location":"02_Condicionales.html#ejercicio-1","title":"Ejercicio 1\u00b6","text":"<p>Desarrolle un programa que genere aleatoriamente el lanzamiento de una moneda e indique el resultado del \u00e9ste.</p>"},{"location":"02_Condicionales.html#ejercicio-2","title":"Ejercicio 2\u00b6","text":"<p>Un a\u00f1o es bisiesto si es divisible por $4$, excepto si es divisible por $100$ y no por $400$. Escriba un programa que reciba un a\u00f1o como entrada e indique <code>True</code> si un a\u00f1o es bisiesto o <code>False</code> si no lo es.</p>"},{"location":"02_Condicionales.html#ejercicio-3","title":"Ejercicio 3\u00b6","text":"<p>El riesgo de que una persona sufra enfermedades coronarias depende de su edad y su \u00edndice de masa corporal:</p> edad &lt; 45 edad \u2265 45 IMC &lt; 22 bajo medio IMC \u2265 22 medio alto <p>El \u00edndice de masa corporal (IMC) es el cuociente entre el peso del individuo en kilos y el cuadrado de su altura en metros.</p> <p>Escriba un programa que reciba como entrada la altura, el peso y la edad de una persona, y entregue su IMC en conjunto a su condici\u00f3n de riesgo.</p>"},{"location":"02_Condicionales.html#ejercicio-3-bis","title":"Ejercicio 3-bis\u00b6","text":""},{"location":"03_Ciclos.html","title":"Ciclos","text":"In\u00a0[\u00a0]: Copied! <pre>m = int(input(\"m: \"))\nn = int(input(\"n: \"))\nk = 0\n\nwhile m &gt; 0:\n    m = m - 1\n    k = k + n\n\nprint(\"El producto de m y n es:\",k)\n</pre> m = int(input(\"m: \")) n = int(input(\"n: \")) k = 0  while m &gt; 0:     m = m - 1     k = k + n  print(\"El producto de m y n es:\",k) <pre>m: 5\nn: 4\nEl producto de m y n es: 20\n</pre> <ul> <li>\u00bfEntiendes c\u00f3mo se lleva a cabo el c\u00e1lculo del producto?</li> <li>\u00bfPor qu\u00e9 estamos seguros de que en alg\u00fan momento terminar\u00e1 el ciclo?</li> </ul> <p>1a. Escriba un programa que calcule el promedio de las notas del certamen 1 de un paralelo de IWI131. (N\u00f3tese que generalmente los paralelos no tienen la misma cantidad de alumnos)</p> In\u00a0[\u00a0]: Copied! <pre>cant = int(input(\"Ingrese la cantidad de alumnos: \"))\n\ncont = 0 #contador de alumnos/notas ingresadas\nsuma = 0 #notas acumuladas\n\nwhile cont &lt; cant:\n    nota = int(input(\"Ingrese nota: \"))\n    suma = suma + nota\n    cont = cont + 1\n\nprint(cont)\nprint(\"El promedio del paralelo es:\", int(round(suma/cont)))\n</pre> cant = int(input(\"Ingrese la cantidad de alumnos: \"))  cont = 0 #contador de alumnos/notas ingresadas suma = 0 #notas acumuladas  while cont &lt; cant:     nota = int(input(\"Ingrese nota: \"))     suma = suma + nota     cont = cont + 1  print(cont) print(\"El promedio del paralelo es:\", int(round(suma/cont))) <pre>Ingrese la cantidad de alumnos: 3\nIngrese nota: 10\nIngrese nota: 20\nIngrese nota: 30\n3\nEl promedio del paralelo es: 20\n</pre> <p>1b. Escriba un programa que calcule el promedio las notas de varios alumnos. Se ingresar\u00e1n notas hasta que se ingrese el valor $-1$.</p> In\u00a0[\u00a0]: Copied! <pre>cont = 0 #contador de cantidad notas ingresadas\nsuma = 0 #notas acumuladas\n\nnota = int(input(\"Ingrese nota: \"))\n\nwhile nota != -1:\n    suma = suma + nota\n    cont += 1 #cont = cont + 1\n    nota = int(input(\"Ingrese nota: \"))\n\nprint(\"El promedio es:\", int(round(suma/cont)))\n</pre> cont = 0 #contador de cantidad notas ingresadas suma = 0 #notas acumuladas  nota = int(input(\"Ingrese nota: \"))  while nota != -1:     suma = suma + nota     cont += 1 #cont = cont + 1     nota = int(input(\"Ingrese nota: \"))  print(\"El promedio es:\", int(round(suma/cont))) <pre>Ingrese nota: 3\nIngrese nota: 10\nIngrese nota: 20\nIngrese nota: -1\nEl promedio es: 11\n</pre> <p>1c. Escriba un programa que calcule el promedio las notas de varios alumnos. Se ingresar\u00e1n notas hasta que se ingrese el valor $-1$.</p> In\u00a0[\u00a0]: Copied! <pre>flag = True # bandera que indica si condicion se cumple\ncont = 0 #contador de cantidad notas ingresadas\nsuma = 0 #notas acumuladas\n\nwhile flag: #flag == True\n    nota = int(input(\"Ingrese nota: \"))\n    if nota == -1:\n        flag = False\n    else:\n        suma += nota #suma = suma + nota\n        cont += 1 #cont = cont + 1\n\nprint(\"El promedio es:\", int(round(suma/cont)))\n</pre> flag = True # bandera que indica si condicion se cumple cont = 0 #contador de cantidad notas ingresadas suma = 0 #notas acumuladas  while flag: #flag == True     nota = int(input(\"Ingrese nota: \"))     if nota == -1:         flag = False     else:         suma += nota #suma = suma + nota         cont += 1 #cont = cont + 1  print(\"El promedio es:\", int(round(suma/cont))) <pre>Ingrese nota: 10\nIngrese nota: 20\nIngrese nota: -1\nEl promedio es: 15\n</pre> <ol> <li>Patr\u00f3n de acumulaci\u00f3n con suma.</li> <li>Patr\u00f3n de acumulaci\u00f3n con multiplicaci\u00f3n.</li> <li>Patr\u00f3n de conteo.</li> <li>Patr\u00f3n de encontrar el mayor (m\u00e1ximo).</li> <li>Patr\u00f3n de encontrar el menor (m\u00ednimo).</li> </ol> <p>Escriba un programa que reciba como entrada un n\u00famero entero. El programa debe mostrar el resultado de la suma de los n\u00fameros al cuadrado desde el $1$ hasta el valor ingresado. $$ 1^2+2^2+\\ldots+(n-1)^2+n^2 $$</p> In\u00a0[\u00a0]: Copied! <pre>n = int(input(\"Ingrese n: \"))\nsuma = 0\ncont = 1\n\nwhile cont &lt;= n:\n    d = cont**2\n    suma = suma + d\n    cont += 1\n\nprint(\"La suma de los numeros al cuadrado es:\", suma)\n</pre> n = int(input(\"Ingrese n: \")) suma = 0 cont = 1  while cont &lt;= n:     d = cont**2     suma = suma + d     cont += 1  print(\"La suma de los numeros al cuadrado es:\", suma) <pre>Ingrese n: 4\nLa suma de los numeros al cuadrado es: 30\n</pre> <p>\u00bfCu\u00e1les son los elementos de este patr\u00f3n?</p> <p>Escriba una programa que calcule el factorial de un n\u00famero $n$ ingresada como entrada: $3! = 1\\cdot 2 \\cdot 3$</p> In\u00a0[\u00a0]: Copied! <pre>n = int(input(\"Ingrese n: \"))\n\nif n &lt; 0:\n    print(\"El factorial est\u00e1 definido s\u00f3lo para n\u00fameros naturales mayores o igual que 0.\")\nelse:\n    prod = 1\n    cont = 1\n\n    while cont &lt;= n:\n        prod  = prod * cont # prod *= cont\n        cont += 1 #cont = cont + 1\n\n    print(\"El factorial de\", n, \"es:\", prod)\n</pre> n = int(input(\"Ingrese n: \"))  if n &lt; 0:     print(\"El factorial est\u00e1 definido s\u00f3lo para n\u00fameros naturales mayores o igual que 0.\") else:     prod = 1     cont = 1      while cont &lt;= n:         prod  = prod * cont # prod *= cont         cont += 1 #cont = cont + 1      print(\"El factorial de\", n, \"es:\", prod) <pre>Ingrese n: 3\nEl factorial de 3 es: 6\n</pre> <p>\u00bfCu\u00e1les son los elementos de este patr\u00f3n?</p> <p>\u00bfVes las diferencias con el patr\u00f3n de acumulaci\u00f3n con suma?</p> <p>Escriba un programa que solicite el ingreso de $n$ n\u00fameros, luego entregue la cantidad de n\u00fameros pares ingresados.</p> In\u00a0[\u00a0]: Copied! <pre>n = int(input(\"Ingrese n: \"))\npares = 0 #contador de pares\ncont = 0 #contador de numeros\n\nwhile cont &lt; n:\n    num = int(input(\"Ingrese numero: \"))\n\n    if num % 2 == 0: #si es divisible por 2\n        pares += 1 #pares = pares + 1\n\n    print(\"pares =\", pares)\n    cont += 1 #cont = cont + 1\n\nprint(\"La cantidad de pares ingresados es:\", pares)\n</pre> n = int(input(\"Ingrese n: \")) pares = 0 #contador de pares cont = 0 #contador de numeros  while cont &lt; n:     num = int(input(\"Ingrese numero: \"))      if num % 2 == 0: #si es divisible por 2         pares += 1 #pares = pares + 1      print(\"pares =\", pares)     cont += 1 #cont = cont + 1  print(\"La cantidad de pares ingresados es:\", pares) <pre>Ingrese n: 3\nIngrese numero: 4\npares = 1\nIngrese numero: 5\npares = 1\nIngrese numero: 6\npares = 2\nLa cantidad de pares ingresados es: 2\n</pre> <p>\u00bfCu\u00e1les son los elementos de este patr\u00f3n?</p> <p>Escribir un programa que solicite n n\u00fameros y luego muestre el n\u00famero mayor que haya sido ingresado.</p> <p>Opci\u00f3n 1: usando un n\u00famero muy peque\u00f1o para comparar.</p> In\u00a0[\u00a0]: Copied! <pre>n = int(input(\"Ingrese n: \"))\ni = 1\nmayor = float(\"-inf\")\n\nwhile i &lt;= n:\n    mensaje = \"Ingrese numero: \"\n    numero =  float(input(mensaje))\n\n    if mayor &lt; numero:\n        mayor = numero\n\n    print(\"mayor temp =\", mayor)\n    i += 1\n\nprint(\"El numero mayor es:\", mayor)\n</pre> n = int(input(\"Ingrese n: \")) i = 1 mayor = float(\"-inf\")  while i &lt;= n:     mensaje = \"Ingrese numero: \"     numero =  float(input(mensaje))      if mayor &lt; numero:         mayor = numero      print(\"mayor temp =\", mayor)     i += 1  print(\"El numero mayor es:\", mayor) <pre>Ingrese n: 3\nIngrese numero: 1\nmayor temp = 1.0\nIngrese numero: 2\nmayor temp = 2.0\nIngrese numero: 3\nmayor temp = 3.0\nEl numero mayor es: 3.0\n</pre> <p>Opci\u00f3n 2: sin usar n\u00famero muy peque\u00f1o para comparar.</p> In\u00a0[\u00a0]: Copied! <pre>n = int(input(\"Ingrese n: \"))\ni = 1\n\nwhile i &lt;= n:\n    mensaje = \"Ingrese numero: \"\n    numero =  float(input(mensaje))\n\n    if i == 1:\n        mayor = numero\n    elif mayor &lt; numero:\n        mayor = numero\n    i += 1\n\nprint(\"El numero mayor es\", mayor)\n</pre> n = int(input(\"Ingrese n: \")) i = 1  while i &lt;= n:     mensaje = \"Ingrese numero: \"     numero =  float(input(mensaje))      if i == 1:         mayor = numero     elif mayor &lt; numero:         mayor = numero     i += 1  print(\"El numero mayor es\", mayor) <pre>Ingrese n: 3\nIngrese numero: 1\nIngrese numero: 2\nIngrese numero: 3\nEl numero mayor es 3.0\n</pre> <p>\u00bfCu\u00e1les son los elementos de este patr\u00f3n?</p> <p>\u00bfC\u00f3mo cambia el patr\u00f3n anterior si ahora se quiere encontrar el m\u00ednimo?</p> In\u00a0[\u00a0]: Copied! <pre>n = int(input(\"Ingrese n: \"))\ni = 1\nmenor = float(\"inf\")\n\nwhile i &lt;= n:\n    mensaje = \"Ingrese numero: \"\n    numero =  float(input(mensaje))\n\n    if menor &gt; numero:\n        menor = numero\n    i += 1\n\nprint(\"El numero menor es:\", menor)\n</pre> n = int(input(\"Ingrese n: \")) i = 1 menor = float(\"inf\")  while i &lt;= n:     mensaje = \"Ingrese numero: \"     numero =  float(input(mensaje))      if menor &gt; numero:         menor = numero     i += 1  print(\"El numero menor es:\", menor) <pre>Ingrese n: 3\nIngrese numero: 1\nIngrese numero: 2\nIngrese numero: 3\nEl numero menor es: 1.0\n</pre> In\u00a0[\u00a0]: Copied! <pre>fila = 0\nwhile fila &lt; 4:\n    columna = 0\n    linea = \"\"\n    while columna &lt; 10:\n        linea = linea + \"*\"\n        columna += 1\n    print(linea)\n    fila += 1\n</pre> fila = 0 while fila &lt; 4:     columna = 0     linea = \"\"     while columna &lt; 10:         linea = linea + \"*\"         columna += 1     print(linea)     fila += 1 <pre>**********\n**********\n**********\n**********\n</pre> <p>El ciclo interno ejecuta sus 10 iteraciones para cada iteraci\u00f3n del ciclo externo.</p> <p>Entonces, \u00bfcu\u00e1ntas veces en total se ejecuta la instrucci\u00f3n <code>linea = linea + \"*\"</code>?</p> <p>\u00bfCu\u00e1les son todos los valores por los que pasa la variable columna durante la ejecuci\u00f3n del programa?</p> In\u00a0[\u00a0]: Copied! <pre>cantidad_filas = int(input(\"Ingrese la cantidad de filas: \"))\ncantidad_columnas = int(input(\"Ingrese la cantidad de columnas: \"))\nfila = 0\nwhile fila &lt; cantidad_filas:\n    columna = 0\n    linea = \"\"\n    while columna &lt; cantidad_columnas:\n        linea = linea + \"*\"\n        columna += 1\n    print(linea)\n    fila += 1\n</pre> cantidad_filas = int(input(\"Ingrese la cantidad de filas: \")) cantidad_columnas = int(input(\"Ingrese la cantidad de columnas: \")) fila = 0 while fila &lt; cantidad_filas:     columna = 0     linea = \"\"     while columna &lt; cantidad_columnas:         linea = linea + \"*\"         columna += 1     print(linea)     fila += 1 <pre>Ingrese la cantidad de filas: 4\nIngrese la cantidad de columnas: 5\n*****\n*****\n*****\n*****\n</pre> In\u00a0[\u00a0]: Copied! <pre>i = 1\nwhile i &lt;= 6:\n    j = 1\n    while j &lt;= 6:\n        print(i,j)\n        j += 1\n    i += 1\n</pre> i = 1 while i &lt;= 6:     j = 1     while j &lt;= 6:         print(i,j)         j += 1     i += 1 <pre>1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6\n4 1\n4 2\n4 3\n4 4\n4 5\n4 6\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n</pre> In\u00a0[\u00a0]: Copied! <pre>t= int(input('Inicio: '))\n\nwhile t != 1:\n    print(int(t))\n    if t % 2 == 0:\n        t = t/2\n    else:\n        t = (3*t) + 1\n\nprint(int(t))\n</pre> t= int(input('Inicio: '))  while t != 1:     print(int(t))     if t % 2 == 0:         t = t/2     else:         t = (3*t) + 1  print(int(t)) <pre>Inicio: 3\n3\n10\n5\n16\n8\n4\n2\n1\n</pre> In\u00a0[\u00a0]: Copied! <pre>n=int(input(\"n: \"))\nes_primo = True\nd = 2\n\nwhile d&lt;n and es_primo:\n    if n%d == 0:\n        es_primo = False\n    d = d+1\n\nif es_primo:\n    print(\"Es primo\")\nelse:\n    print(\"Es compuesto\")\n</pre> n=int(input(\"n: \")) es_primo = True d = 2  while d <pre>n: 5\nEs primo\n</pre> n es_primo d 5 True 2 3 4 5 <pre><code>        </code></pre> Pantalla: Es primo"},{"location":"03_Ciclos.html#ciclos-y-estructuras-repetitivas","title":"Ciclos y Estructuras Repetitivas\u00b6","text":""},{"location":"03_Ciclos.html#ciclos","title":"Ciclos\u00b6","text":"<p>Permiten repetir un conjunto de instrucciones.</p> <p>Hay dos tipos de ciclos:</p> <ul> <li>Los que se ejecutan una determinada cantidad de veces, conocida previamente.</li> <li>Los que se ejecutan mientras una condici\u00f3n se cumple.</li> </ul> <p>Nota: En realidad el segundo tipo puede utilizarse para modelar el primero.</p>"},{"location":"03_Ciclos.html#instruccion-while","title":"Instrucci\u00f3n while\u00b6","text":"<p>Una instrucci\u00f3n <code>while</code> ejecuta una secuencia de instrucciones mientras una condici\u00f3n sea verdadera.</p> <p>Las instrucciones que se repiten son las que se encuentran indentadas a la derecha, dentro de la instrucci\u00f3n <code>while</code>.</p>"},{"location":"03_Ciclos.html#sintaxis","title":"Sintaxis\u00b6","text":"<pre>while condici\u00f3n:\n    instrucciones mientras la condici\u00f3n sea verdadera\n</pre>"},{"location":"03_Ciclos.html#notas-adicionales","title":"Notas adicionales:\u00b6","text":"<ul> <li>A una ejecuci\u00f3n de las instrucciones que componen el ciclo se le llama iteraci\u00f3n.</li> <li>La condici\u00f3n de un <code>while</code> es evaluada antes de cada iteraci\u00f3n.</li> <li>Por lo anterior, es posible que un <code>while</code> no ejecute ninguna iteraci\u00f3n, si la condici\u00f3n es <code>False</code> al inicio.</li> </ul>"},{"location":"03_Ciclos.html#entendemos-while","title":"\u00bfEntendemos <code>while</code>?\u00b6","text":"<ul> <li>\u00bfQu\u00e9 realiza el siguiente ejemplo?</li> </ul>"},{"location":"03_Ciclos.html#uso-de-ciclos","title":"Uso de Ciclos\u00b6","text":""},{"location":"03_Ciclos.html#patrones-comunes","title":"Patrones Comunes\u00b6","text":"<p>Un patr\u00f3n es una soluci\u00f3n que puede ser aplicada a distintos problemas o situaciones, con ligeros cambios.</p>"},{"location":"03_Ciclos.html#1-patron-de-acumulacion-con-suma","title":"1. Patr\u00f3n de acumulaci\u00f3n con suma.\u00b6","text":""},{"location":"03_Ciclos.html#estructura-del-patron-de-acumulacion-con-suma","title":"Estructura del patr\u00f3n de acumulaci\u00f3n con suma:\u00b6","text":"<pre>suma = 0\nwhile (condici\u00f3n_del_ciclo):\n    n = ... #calcular lo que se quiere acumular\n    suma = suma + n\n</pre>"},{"location":"03_Ciclos.html#2-patron-de-acumulacion-con-multiplicacion","title":"2. Patr\u00f3n de acumulaci\u00f3n con multiplicaci\u00f3n\u00b6","text":""},{"location":"03_Ciclos.html#estructura-del-patron-de-acumulacion-con-multiplicacion","title":"Estructura del patr\u00f3n de acumulaci\u00f3n con multiplicaci\u00f3n:\u00b6","text":"<pre>producto = 1\nwhile (condici\u00f3n_del_ciclo):\n    n = ... #calcular lo que se quiere acumular\n    producto = producto * n\n</pre>"},{"location":"03_Ciclos.html#3-patron-de-conteo","title":"3. Patr\u00f3n de conteo\u00b6","text":""},{"location":"03_Ciclos.html#estructura-del-patron-de-conteo","title":"Estructura del patr\u00f3n de conteo:\u00b6","text":"<pre>contador = 0\nwhile (condici\u00f3n_del_ciclo):\n    if (condici\u00f3n_para_contar):\n        contador = contador + 1\n</pre>"},{"location":"03_Ciclos.html#4-patron-de-encontrar-el-mayor-maximo","title":"4. Patr\u00f3n de encontrar el mayor (m\u00e1ximo)\u00b6","text":""},{"location":"03_Ciclos.html#estructura-del-patron-de-encontrar-el-mayor","title":"Estructura del patr\u00f3n de encontrar el mayor:\u00b6","text":"<pre>mayor = numero_muy_chico\nwhile (condici\u00f3n_del_ciclo):\n    n = ... #determinar lo que se quiere comparar\n    if n &gt; mayor:\n        mayor = n\n</pre>"},{"location":"03_Ciclos.html#5-patron-de-encontrar-el-menor-minimo","title":"5. Patr\u00f3n de encontrar el menor (m\u00ednimo)\u00b6","text":""},{"location":"03_Ciclos.html#estructura-del-patron-de-encontrar-el-menor","title":"Estructura del patr\u00f3n de encontrar el menor:\u00b6","text":"<pre>menor = numero_muy_grande\nwhile (condici\u00f3n_del_ciclo):\n    n = ... #determinar lo que se quiere comparar\n    if n &lt; menor:\n        menor = n\n</pre>"},{"location":"03_Ciclos.html#ciclos-anidados","title":"Ciclos anidados\u00b6","text":"<p>Dentro de un ciclo es posible incluir cualquier tipo de instrucci\u00f3n, incluso otros ciclos.</p> <p>Cuando un ciclo se encuentra dentro de otro ciclo, el ciclo interno se ejecutar\u00e1 completo en cada iteraci\u00f3n del ciclo externo.</p>"},{"location":"03_Ciclos.html#ejemplo-1","title":"Ejemplo 1:\u00b6","text":"<p>Escribir un programa que imprima en la pantalla un rect\u00e1ngulo de asteriscos como el siguiente, que tiene 4 filas con 10 asteriscos cada una:</p> <pre><code>**********\n**********\n**********\n**********\n</code></pre>"},{"location":"03_Ciclos.html#ejercicio","title":"Ejercicio:\u00b6","text":"<p>Modificar el programa anterior para que la cantidad de filas y columnas sean entradas, pudiendo dibujar as\u00ed rect\u00e1ngulos de diferentes dimensiones.</p>"},{"location":"03_Ciclos.html#ejemplo-2","title":"Ejemplo 2:\u00b6","text":"<p>Escribir un programa que muestre todas las combinaciones posibles al lanzar $2$ dados.</p>"},{"location":"03_Ciclos.html#ejercicios","title":"Ejercicios\u00b6","text":""},{"location":"03_Ciclos.html#ejercicio-1-conjetura-de-ulam","title":"Ejercicio 1: Conjetura de Ulam\u00b6","text":"<p>A partir de un n\u00famero cualquiera (entrada) es posible hacer una sucesi\u00f3n de n\u00fameros que termina en $1$.</p> <ul> <li>Si el n\u00famero es par, se debe dividir por $2$.</li> <li>Si el n\u00famero es impar, se debe multiplicar por $3$ y sumarle $1$.</li> </ul> <p>Con esto se obtiene el siguiente n\u00famero de la sucesi\u00f3n, al cual se le deben aplicar las mismas operaciones. La sucesi\u00f3n de n\u00fameros termina cuando el n\u00famero obtenido por medio de las operaciones es $1$.</p>"},{"location":"03_Ciclos.html#ejercicio-2","title":"Ejercicio 2\u00b6","text":"<p>Escriba un programa que determine si un n\u00famero es primo o compuesto.</p>"},{"location":"03_Ciclos.html#ejercicio-3","title":"Ejercicio 3\u00b6","text":"<p>Utilizando el programa dise\u00f1ado anteriormente para determinar si un n\u00famero es primo o compuesto. Realice el ruteo para los siguientes valores:</p> <ul> <li>5</li> </ul>"},{"location":"04_Strings.html","title":"Strings","text":"<p>Son el tipo de dato usado para representar texto en Python.</p> <p>Anteriormente, los strings se utilizaron en entradas y salidas de datos.</p> In\u00a0[2]: Copied! <pre>nombre = input(\"Ingrese su nombre: \")\n</pre> nombre = input(\"Ingrese su nombre: \") <pre>Ingrese su nombre: Juan\n</pre> In\u00a0[3]: Copied! <pre>nombre\n</pre> nombre Out[3]: <pre>'Juan'</pre> In\u00a0[4]: Copied! <pre>print(\"Mi nombre es\",nombre)\n</pre> print(\"Mi nombre es\",nombre) <pre>Mi nombre es Juan\n</pre> <p>Los valores literales <code>''</code> y <code>\"\"</code> representan strings vac\u00edos, es decir, un texto que no contiene caracteres.</p> In\u00a0[5]: Copied! <pre>print(\"\")\n</pre> print(\"\") <pre>\n</pre> In\u00a0[6]: Copied! <pre>\"\"\n</pre> \"\" Out[6]: <pre>''</pre> In\u00a0[7]: Copied! <pre>''\n</pre> '' Out[7]: <pre>''</pre> <p>Un string no vac\u00edo est\u00e1 compuesto por caracteres.</p> In\u00a0[8]: Copied! <pre>\"hola mundo!\"\n</pre> \"hola mundo!\" Out[8]: <pre>'hola mundo!'</pre> <p>Los caracteres de un string se numeran de izquierda a derecha, comenzando en $0$.</p> h o l a m u n d o ! 0 1 2 3 4 5 6 7 8 9 10 <p>Es posible acceder al caracter que se encuentra en la posici\u00f3n i-\u00e9sima, es decir, la que tiene el \u00edndice $i$, utilizando una notaci\u00f3n con corchetes.</p> In\u00a0[9]: Copied! <pre>a = \"hola mundo!\"\n#obtiene el caracter que esta en el indice 5 y lo muestra por pantalla\nprint(a[5])\n</pre> a = \"hola mundo!\" #obtiene el caracter que esta en el indice 5 y lo muestra por pantalla print(a[5]) <pre>m\n</pre> In\u00a0[10]: Copied! <pre>#evalua el valor del \u00edndice 5 en la variable a\na[5]\n</pre> #evalua el valor del \u00edndice 5 en la variable a a[5] Out[10]: <pre>'m'</pre> <p>Tambi\u00e9n es posible enumerar los caracteres de un string, desde el final hacia la izquierda, usando \u00edndices negativos que comienzan en $-1$:</p> h o l a m u n d o ! -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 In\u00a0[11]: Copied! <pre>a = \"hola mundo!\"\n#obtiene el ultimo caracter y lo muestra por pantalla\nprint(a[-1])\n</pre> a = \"hola mundo!\" #obtiene el ultimo caracter y lo muestra por pantalla print(a[-1]) <pre>!\n</pre> In\u00a0[12]: Copied! <pre>#evalua el valor del \u00edndice -1 en la variable a\na[-1]\n</pre> #evalua el valor del \u00edndice -1 en la variable a a[-1] Out[12]: <pre>'!'</pre> <p>Los corchetes tambi\u00e9n pueden utilizarse para obtener una parte de un string, tambi\u00e9n conocida como substring o rebanada.</p> <p><code>s[inicio:fin]</code> entrega un string con todos los caracteres desde el \u00edndice <code>inicio</code>, hasta el \u00edndice <code>fin-1</code>.</p> <p>Por ejemplo, <code>a[3:7]</code>, donde <code>a = \"hola mundo!\"</code> corresponde al substring <code>'a mu'</code></p> h o l a m u n d o ! 3 4 5 6 In\u00a0[13]: Copied! <pre>a = \"hola mundo!\"\nb = a[3:7]\nprint(b)\n</pre> a = \"hola mundo!\" b = a[3:7] print(b) <pre>a mu\n</pre> <p>Cuando se omite el <code>inicio</code> del rango, se entiende que el substring comienza en el inicio del string original.</p> <p>Ejemplo, <code>a[:6]</code>, donde <code>a = \"hola mundo!\"</code> corresponde al substring <code>'hola m'</code>.</p> h o l a m u n d o ! 0 1 2 3 4 5 In\u00a0[14]: Copied! <pre>a = \"hola mundo!\"\nb = a[:6]\nprint(b)\n</pre> a = \"hola mundo!\" b = a[:6] print(b) <pre>hola m\n</pre> <p>Cuando se omite el <code>fin</code> del rango, se entiende que el substring termina al final del string original.</p> <p>Ejemplo, <code>a[2:]</code>, donde <code>a = \"hola mundo!\"</code> corresponde al substring <code>'la mundo!'</code>.</p> h o l a m u n d o ! 2 3 4 5 6 7 8 9 10 In\u00a0[15]: Copied! <pre>a = \"hola mundo!\"\nb = a[2:]\nprint(b)\n</pre> a = \"hola mundo!\" b = a[2:] print(b) <pre>la mundo!\n</pre> <p>\u00bfQu\u00e9 ocurre en los siguientes casos?</p> In\u00a0[16]: Copied! <pre>a = \"hola mundo!\"\n</pre> a = \"hola mundo!\" In\u00a0[17]: Copied! <pre>a[5:7]\n</pre> a[5:7] Out[17]: <pre>'mu'</pre> In\u00a0[18]: Copied! <pre>a[-3:-1]\n</pre> a[-3:-1] Out[18]: <pre>'do'</pre> In\u00a0[19]: Copied! <pre>a[2:-1]\n</pre> a[2:-1] Out[19]: <pre>'la mundo'</pre> In\u00a0[20]: Copied! <pre>a[-1:4]\n</pre> a[-1:4] Out[20]: <pre>''</pre> <p>Algunos operadores definidos anteriormente para n\u00fameros, tambi\u00e9n tienen una funci\u00f3n al aplicarse sobre strings.</p> <ul> <li>Concatenaci\u00f3n de strings (<code>+</code>)</li> <li>Repetici\u00f3n de strings (<code>*</code>)</li> </ul> <p>Algunos ejemplos:</p> In\u00a0[21]: Copied! <pre>\"hola\" +  \"mundo\"\n</pre> \"hola\" +  \"mundo\" Out[21]: <pre>'holamundo'</pre> In\u00a0[22]: Copied! <pre>x = 4\nc = 4**2\nmensaje = str(4) + \"al cuadrado es\" + str(c)\nprint(mensaje)\n</pre> x = 4 c = 4**2 mensaje = str(4) + \"al cuadrado es\" + str(c) print(mensaje) <pre>4al cuadrado es16\n</pre> In\u00a0[23]: Copied! <pre>x = 4\nc = 4 ** 2\nmensaje = str(4) + \" al cuadrado es \" + str(c)\nprint(mensaje)\n</pre> x = 4 c = 4 ** 2 mensaje = str(4) + \" al cuadrado es \" + str(c) print(mensaje) <pre>4 al cuadrado es 16\n</pre> In\u00a0[24]: Copied! <pre>\"waka\"*2\n</pre> \"waka\"*2 Out[24]: <pre>'wakawaka'</pre> In\u00a0[25]: Copied! <pre>\"fizz\"*3\n</pre> \"fizz\"*3 Out[25]: <pre>'fizzfizzfizz'</pre> In\u00a0[26]: Copied! <pre>\"fizz\" + \"buzz\" * 4\n</pre> \"fizz\" + \"buzz\" * 4 Out[26]: <pre>'fizzbuzzbuzzbuzzbuzz'</pre> <ul> <li>La instrucci\u00f3n <code>in</code> permite saber si un substring est\u00e1 contenido dentro de un string. Es similar a un operador de comparaci\u00f3n, por lo que entrega valores <code>True</code> o <code>False</code>. Se puede negar con el operador l\u00f3gico <code>not</code>.</li> </ul> In\u00a0[27]: Copied! <pre>\"pollo\" in \"repollos\"\n</pre> \"pollo\" in \"repollos\" Out[27]: <pre>True</pre> In\u00a0[28]: Copied! <pre>\"pollo\" in \"gallinero\"\n</pre> \"pollo\" in \"gallinero\" Out[28]: <pre>False</pre> In\u00a0[29]: Copied! <pre>\"agua\" not in \"paraguas\"\n</pre> \"agua\" not in \"paraguas\" Out[29]: <pre>False</pre> <ul> <li>La funci\u00f3n <code>len(s)</code> entrega como resultado la cantidad de caracteres del string <code>s</code> pasado como par\u00e1metro.</li> </ul> In\u00a0[30]: Copied! <pre>len(\"casa\")\n</pre> len(\"casa\") Out[30]: <pre>4</pre> In\u00a0[31]: Copied! <pre>len(\"hola mundo!\")\n</pre> len(\"hola mundo!\") Out[31]: <pre>11</pre> In\u00a0[32]: Copied! <pre>len(\"\")\n</pre> len(\"\") Out[32]: <pre>0</pre> <p>Los operadores de comparaci\u00f3n se pueden utilizar sobre strings.</p> In\u00a0[33]: Copied! <pre>\"a\" &gt; \"z\"\n</pre> \"a\" &gt; \"z\" Out[33]: <pre>False</pre> In\u00a0[34]: Copied! <pre>\"avion\" == \"barco\"\n</pre> \"avion\" == \"barco\" Out[34]: <pre>False</pre> In\u00a0[35]: Copied! <pre>\"Casa\" &lt; \"casa\"\n</pre> \"Casa\" &lt; \"casa\" Out[35]: <pre>True</pre> <p>\u00bfC\u00f3mo se decide el orden de los caracteres?</p> <p>El c\u00f3digo ASCII asocia un n\u00famero decimal a cada caracter (letras, n\u00fameros y otros s\u00edmbolos). Cuando guardamos un string en una variable, el computador almacena en su memoria el c\u00f3digo ASCII de cada caracter que lo forma. El orden de los strings se decide por el orden de los c\u00f3digos de los caracteres que lo componen.</p> C\u00f3digo ASCII caracter C\u00f3digo ASCII caracter 48 \"0\" 65 \"A\" 49 \"1\" 66 \"B\" ... ... ... ... 61 \"=\" 97 \"a\" 62 \"&gt;\" 98 \"b\" ... ... ... ... <p>Considerando los C\u00f3digos ASCII, los caracteres tienen el siguiente orden creciente:</p> <ul> <li>D\u00edgitos escritos como strings</li> <li>Algunos caracteres especiales</li> <li>Letras may\u00fasculas</li> <li>Letras min\u00fasculas</li> </ul> In\u00a0[36]: Copied! <pre>#las minusculas son mayores que las minusculas. Vienen despues en el codigo ASCII\n\"a\" &gt; \"A\"\n</pre> #las minusculas son mayores que las minusculas. Vienen despues en el codigo ASCII \"a\" &gt; \"A\" Out[36]: <pre>True</pre> <p>Ya se ha visto que un mismo caracter escrito en may\u00fasculas es distinto que el mismo caracter en min\u00fasculas.</p> In\u00a0[37]: Copied! <pre>#letras mayusculas son distintas de letras minusculas\n\"a\" == \"A\"\n</pre> #letras mayusculas son distintas de letras minusculas \"a\" == \"A\" Out[37]: <pre>False</pre> <p>Funci\u00f3n <code>ord(c)</code>: Retorna el c\u00f3digo ASCII del caracter <code>c</code>.</p> <p>Funci\u00f3n <code>chr(n)</code>: Retorna un string con el caracter cuyo c\u00f3digo ASCII es el entero <code>n</code>.</p> In\u00a0[38]: Copied! <pre># Obteniendo el C\u00f3digo ASCII del caracter \"A\".\nord(\"A\")\n</pre> # Obteniendo el C\u00f3digo ASCII del caracter \"A\". ord(\"A\") Out[38]: <pre>65</pre> In\u00a0[39]: Copied! <pre># Obteniendo el caracter representado por el C\u00f3digo ASCII 65.\nchr(65)\n</pre> # Obteniendo el caracter representado por el C\u00f3digo ASCII 65. chr(65) Out[39]: <pre>'A'</pre> <p>IMPORTANTE: No es posible alterar directamente un string. Se dice que es un tipo de dato inmutable.</p> <p>Si se quiere cambiar el contenido de una variable de tipo string, se debe crear un nuevo string y asignarlo a la variable.</p> In\u00a0[40]: Copied! <pre>palabra = \"Casa\"\n</pre> palabra = \"Casa\" In\u00a0[41]: Copied! <pre>palabra[0] = \"c\"\n</pre> palabra[0] = \"c\" <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/tmp/ipython-input-1316164755.py in &lt;cell line: 0&gt;()\n----&gt; 1 palabra[0] = \"c\"\n\nTypeError: 'str' object does not support item assignment</pre> <p>Los m\u00e9todos <code>s.upper()</code> y <code>s.lower()</code> permiten cambiar el string <code>s</code> a may\u00fasculas y min\u00fasculas, respectivamente.</p> <p>Un m\u00e9todo es un tipo de operaci\u00f3n que se aplica a un dato impl\u00edcito, que se escribe antes del nombre del m\u00e9todo.</p> <p>La caracter\u00edstica que diferencia a los m\u00e9todos de las funciones es la forma de llamarlos:</p> <ul> <li><p>En una funci\u00f3n aplicada a un string, como <code>len(s)</code>, se escribe el nombre de la funci\u00f3n y el string va dentro de los par\u00e9ntesis.</p> </li> <li><p>En un m\u00e9todo aplicado a un string, como <code>s.upper()</code>, se comienza con el string, seguido de un punto, seguido del nombre del m\u00e9todo y dentro de los par\u00e9ntesis se incluyen par\u00e1metros adicionales en caso de ser necesario.</p> </li> </ul> In\u00a0[42]: Copied! <pre>pal = \"Progra\"\n</pre> pal = \"Progra\" In\u00a0[43]: Copied! <pre>pal.lower()\n</pre> pal.lower() Out[43]: <pre>'progra'</pre> In\u00a0[44]: Copied! <pre>pal.upper()\n</pre> pal.upper() Out[44]: <pre>'PROGRA'</pre> <p><code>s.upper()</code> y <code>s.lower()</code> generan un nuevo string a partir del valor de <code>s</code>.</p> <p>NO MODIFICAN A <code>s</code>.</p> In\u00a0[45]: Copied! <pre>print(pal)\n</pre> print(pal) <pre>Progra\n</pre> <p>Repite un bloque de instrucciones sobre cada uno de los elementos de una colecci\u00f3n.</p> <p>Los strings son colecciones sobre las que se puede aplicar un ciclo <code>for</code>.</p> <p>Cada iteraci\u00f3n del <code>for</code> se aplicar\u00e1 a uno de los elementos del string, a trav\u00e9s de la variable de iteraci\u00f3n.</p> <p>Ejemplo:</p> In\u00a0[46]: Copied! <pre>s = \"hola mundo!\"\nfor caracter in s:\n    print(\"caracter = \" + caracter)\n</pre> s = \"hola mundo!\" for caracter in s:     print(\"caracter = \" + caracter) <pre>caracter = h\ncaracter = o\ncaracter = l\ncaracter = a\ncaracter =  \ncaracter = m\ncaracter = u\ncaracter = n\ncaracter = d\ncaracter = o\ncaracter = !\n</pre> <p>En cada iteraci\u00f3n a la variable de iteraci\u00f3n (en este caso <code>caracter</code>), se le asignar\u00e1 en orden cada uno de los caracteres que componen el string <code>s</code>.</p> <pre>for variable in secuencia:\n    #codigo\n    a = operacion(variable)\n</pre> <ul> <li><p>Cada vez que se utiliza un ciclo for, se define una variable que va a tomar cada uno de los valores de <code>secuencia</code>.</p> </li> <li><p><code>secuencia</code> debe ser un tipo de dato iterable, como un string.</p> </li> <li><p>Los tipos iterables son los que se pueden recorrer elemento por elemento siguiendo un orden. Otros ejemplos de tipos iterables que tambi\u00e9n estudiaremos son las listas y las tuplas.</p> </li> </ul> <p>Vamos a repetir el ejemplo utilizando <code>while</code>.</p> In\u00a0[47]: Copied! <pre>a = \"hola mundo!\"\ni = 0\nwhile i &lt; len(a):\n    print(\"s = \" + a[i])\n    i += 1\n</pre> a = \"hola mundo!\" i = 0 while i &lt; len(a):     print(\"s = \" + a[i])     i += 1 <pre>s = h\ns = o\ns = l\ns = a\ns =  \ns = m\ns = u\ns = n\ns = d\ns = o\ns = !\n</pre> In\u00a0[50]: Copied! <pre>oracion = input(\"Ingrese una oracion: \")\npalabra = input(\"Ingrese una palabra: \")\n\nif palabra in oracion:\n    print(\"La palabra '\"+ str(palabra)+ \"' esta contenida en '\"+str(oracion)+\"'\")\n</pre> oracion = input(\"Ingrese una oracion: \") palabra = input(\"Ingrese una palabra: \")  if palabra in oracion:     print(\"La palabra '\"+ str(palabra)+ \"' esta contenida en '\"+str(oracion)+\"'\") <pre>Ingrese una oracion: Mi perro es bonito\nIngrese una palabra: Perro\n</pre> In\u00a0[51]: Copied! <pre>oracion = input(\"Ingrese una oracion: \")\npalabra = input(\"Ingrese una palabra: \")\n\nif palabra.lower() in oracion.lower():\n    print(\"La palabra '\"+ str(palabra)+ \"' esta contenida en '\"+str(oracion)+\"'\")\n</pre> oracion = input(\"Ingrese una oracion: \") palabra = input(\"Ingrese una palabra: \")  if palabra.lower() in oracion.lower():     print(\"La palabra '\"+ str(palabra)+ \"' esta contenida en '\"+str(oracion)+\"'\") <pre>Ingrese una oracion: Mi perro es bonito\nIngrese una palabra: Perro\nLa palabra 'Perro' esta contenida en 'Mi perro es bonito'\n</pre> In\u00a0[52]: Copied! <pre>palabra1 = input(\"Palabra 1: \")\npalabra2 = input(\"Palabra 2: \")\n\nlargo1 = len(palabra1)\nlargo2 = len(palabra2)\n\nif largo1 &gt; largo2:\n    print(\"La palabra\",palabra1,\"tiene\",largo1-largo2,\"letras mas que la palabra\",palabra2)\nelif largo1 &lt; largo2:\n    print(\"La palabra\",palabra2,\"tiene\",largo2-largo1,\"letras mas que la palabra\",palabra1)\nelse:\n    print(\"La palabra\",palabra1,\"tiene el mismo largo que la palabra\",palabra2)\n</pre> palabra1 = input(\"Palabra 1: \") palabra2 = input(\"Palabra 2: \")  largo1 = len(palabra1) largo2 = len(palabra2)  if largo1 &gt; largo2:     print(\"La palabra\",palabra1,\"tiene\",largo1-largo2,\"letras mas que la palabra\",palabra2) elif largo1 &lt; largo2:     print(\"La palabra\",palabra2,\"tiene\",largo2-largo1,\"letras mas que la palabra\",palabra1) else:     print(\"La palabra\",palabra1,\"tiene el mismo largo que la palabra\",palabra2) <pre>Palabra 1: Perro\nPalabra 2: Gato\nLa palabra Perro tiene 1 letras mas que la palabra Gato\n</pre> In\u00a0[53]: Copied! <pre>letra = input(\"Ingrese una letra: \")\npalabra = input(\"Ingrese una palabra: \")\ncontador = 0\nfor i in palabra:\n    if i == letra:\n        contador +=1\nprint(contador)\n</pre> letra = input(\"Ingrese una letra: \") palabra = input(\"Ingrese una palabra: \") contador = 0 for i in palabra:     if i == letra:         contador +=1 print(contador) <pre>Ingrese una letra: a\nIngrese una palabra: paralelepipedo\n2\n</pre>"},{"location":"04_Strings.html#strings-y-ciclo-for","title":"Strings y Ciclo For\u00b6","text":""},{"location":"04_Strings.html#strings","title":"Strings\u00b6","text":""},{"location":"04_Strings.html#usando-strings-para-entradas-y-salidas","title":"Usando strings para entradas y salidas\u00b6","text":""},{"location":"04_Strings.html#strings-vacios","title":"Strings vac\u00edos\u00b6","text":""},{"location":"04_Strings.html#estructura-de-un-string","title":"Estructura de un String\u00b6","text":""},{"location":"04_Strings.html#indice-de-un-string","title":"\u00cdndice de un string\u00b6","text":""},{"location":"04_Strings.html#acceder-al-caracter-de-un-string-mediante-indexacion","title":"Acceder al caracter de un string mediante indexaci\u00f3n\u00b6","text":""},{"location":"04_Strings.html#substrings","title":"Substrings\u00b6","text":""},{"location":"04_Strings.html#operaciones-elementales-sobre-strings","title":"Operaciones elementales sobre Strings\u00b6","text":""},{"location":"04_Strings.html#otras-operaciones-para-strings","title":"Otras operaciones para strings\u00b6","text":""},{"location":"04_Strings.html#comparaciones-de-strings","title":"Comparaciones de strings\u00b6","text":""},{"location":"04_Strings.html#el-codigo-ascii","title":"El c\u00f3digo ASCII\u00b6","text":""},{"location":"04_Strings.html#mayusculas-y-minusculas","title":"May\u00fasculas y Min\u00fasculas\u00b6","text":""},{"location":"04_Strings.html#de-caracter-a-codigo-ascii-y-viceversa","title":"De Caracter a C\u00f3digo ASCII y viceversa\u00b6","text":""},{"location":"04_Strings.html#ciclo-for","title":"Ciclo <code>for</code>\u00b6","text":""},{"location":"04_Strings.html#sintaxis-generica-de-un-ciclo-for","title":"Sintaxis gen\u00e9rica de un Ciclo For\u00b6","text":""},{"location":"04_Strings.html#recorrer-string-utilizando-while","title":"Recorrer <code>string</code> utilizando  <code>while</code>\u00b6","text":""},{"location":"04_Strings.html#ejercicios","title":"Ejercicios\u00b6","text":""},{"location":"04_Strings.html#ejercicio-1","title":"Ejercicio 1\u00b6","text":"<p>Escriba un programa que indique si una palabra existe dentro de una oraci\u00f3n. Tanto la palabra, como la oraci\u00f3n ser\u00e1n ingresadas como entrada de datos.</p>"},{"location":"04_Strings.html#ejercicio-2","title":"Ejercicio 2\u00b6","text":"<p>Modifique el programa anterior para se acepte encontrar palabras dentro de una oraci\u00f3n, sin importar si est\u00e1n escritas en diferente combinaci\u00f3n de may\u00fasculas/min\u00fasculas.</p>"},{"location":"04_Strings.html#ejercicio-3","title":"Ejercicio 3\u00b6","text":"<p>Escriba un programa que pida al usuario dos palabras, y que indique cu\u00e1l de ellas es la m\u00e1s larga y por cu\u00e1ntas letras lo es.</p>"},{"location":"04_Strings.html#ejercicio-4","title":"Ejercicio 4\u00b6","text":"<p>Escriba un programa que indique las veces aparece la letra en la palabra.</p>"},{"location":"05_Funciones.html","title":"Funciones","text":"<p>Hasta el momento hemos utilizado funcionas predefinidas en el n\u00facleo de Python, como <code>round()</code> y <code>abs()</code>, o importadas desde bibliotecas, como <code>sqrt()</code> de math y <code>randint()</code> de random.</p> <p>En esta unidad aprenderemos a definir nuestras propias funciones para resolver tareas espec\u00edficas.</p> <p>Para definir una funci\u00f3n y poder llamarla posteriormente desde nuestro programa o desde otra funci\u00f3n, debemos tener en cuenta:</p> <ul> <li>El nombre que le daremos a la funci\u00f3n, que debemos elegir siguiendo las mismas reglas que usamos para nombrar variables.</li> <li>Los par\u00e1metros que tendr\u00e1 la funci\u00f3n, y el orden en que aparecen en la definici\u00f3n.</li> <li>El valor de retorno que entregar\u00e1 la funci\u00f3n una vez que lleve a cabo su trabajo.</li> </ul> <p>Al llamar a una funci\u00f3n la ejecuci\u00f3n del programa se traslada al c\u00f3digo de la funci\u00f3n, copiando a los par\u00e1metros los argumentos utilizados en el llamado. Cuando la funci\u00f3n termina, la ejecuci\u00f3n vuelve al punto del llamado, llevando consigo el valor de retorno.</p> <p>Para definir una funci\u00f3n utilizamos la palabra reservada <code>def</code>:</p> <pre>def nombre_funcion(parametro1, parametro2, ...):\n</pre> <p>Los par\u00e1metros tienen nombres que elegimos al definir la funci\u00f3n. En la pr\u00e1ctica, los par\u00e1metros son variables que asumen los valores de los argumentos dados a la funci\u00f3n cuando es llamada.</p> <p>Al escribir una funci\u00f3n, suponemos que sus par\u00e1metros ya traen valores y simplemente los utilizamos a trav\u00e9s del nombre que le damos a los par\u00e1metros.</p> <p>El caracter de dos puntos al final de la definici\u00f3n es obligatorio.</p> <p>Las instrucciones que componen la funci\u00f3n deben aparecer indentadas a partir de la l\u00ednea siguiente a la definici\u00f3n.</p> <p>Una instrucci\u00f3n especial, <code>return</code>, se utiliza para indicar el fin de la ejecuci\u00f3n de la funci\u00f3n y el valor que retornar\u00e1 como resultado. Esta instrucci\u00f3n puede aparecer m\u00e1s de una vez en el c\u00f3digo de la funci\u00f3n, normalmente dentro de condicionales.</p> <p>La instrucci\u00f3n <code>return</code> cumple $2$ prop\u00f3sitos:</p> <ul> <li>Termina la ejecuci\u00f3n de la funci\u00f3n, volviendo al punto donde fue llamada.</li> <li>Especifica el resultado de la ejecuci\u00f3n de la funci\u00f3n, el que ser\u00e1 entregado al punto de llamado.</li> </ul> <p>Las funciones deben ser definidas antes del punto donde son llamadas. De lo contrario se produce un error de ejecuci\u00f3n.</p> <p>Para llamar una funci\u00f3n se utiliza su nombre y se incluye entre par\u00e9ntesis la lista de argumentos que ser\u00e1n copiados, en el mismo orden en que aparecen, a los par\u00e1metros definidos en la funci\u00f3n.</p> <p>Al momento de hacer el llamado debe considerarse lo que el programa har\u00e1 con el valor de retorno de la funci\u00f3n, el que reemplazar\u00e1 el llamado de la funci\u00f3n cuando \u00e9sta termine.</p> <p>Escriba una funci\u00f3n que determine si un n\u00famero es par o no, retornando <code>True</code> o <code>False</code>, seg\u00fan corresponda.</p> In\u00a0[1]: Copied! <pre>def es_par(num):\n    if num%2==0:\n        return True\n    else:\n        return False\n</pre> def es_par(num):     if num%2==0:         return True     else:         return False <p>Ahora podemos usar la funci\u00f3n para determinar si un n\u00famero es par:</p> In\u00a0[2]: Copied! <pre>resultado = es_par(5)\n</pre> resultado = es_par(5) <p>En este caso, la variable resultado contendr\u00e1 el valor <code>False</code>, pues el n\u00famero $5$ no es par. Observe la forma en que se hace el llamado, escribiendo en el par\u00e9ntesis un argumento para el par\u00e1metro que espera la funci\u00f3n, y utilizando el valor de retorno que la funci\u00f3n entrega; en este caso, almacenando ese valor en la variable resultado.</p> <p>La funci\u00f3n anterior podr\u00eda escribirse de manera m\u00e1s corta, como se ve a continuaci\u00f3n:</p> In\u00a0[3]: Copied! <pre>def es_par(num):\n    if num%2==0:\n        return True\n    return False\n</pre> def es_par(num):     if num%2==0:         return True     return False <p>Observe que se elimin\u00f3 la componente <code>else</code> del <code>if</code>. Sin embargo, la funci\u00f3n lleva a cabo su trabajo de la misma manera.</p> <p>Si el n\u00famero es par, se ejecutar\u00e1 la instrucci\u00f3n <code>return True</code>, provocando que la funci\u00f3n retorne de inmediato con su resultado sin ejecutar ninguna instrucci\u00f3n m\u00e1s de la funci\u00f3n a partir de ah\u00ed. Por otra parte, si el n\u00famero es impar, el <code>if</code> no tendr\u00e1 efecto y llegar\u00e1 hasta la \u00faltima instrucci\u00f3n en donde retorna el valor <code>False</code>.</p> <p>Finalmente, la siguiente es una forma a\u00fan m\u00e1s sucinta para hacer lo mismo:</p> In\u00a0[4]: Copied! <pre>def es_par(num):\n    return num%2==0\n</pre> def es_par(num):     return num%2==0 <p>La funci\u00f3n lleva a cabo la comparaci\u00f3n y retorna el resultado de esa comparaci\u00f3n. Cuando el n\u00famero es par, la comparaci\u00f3n dar\u00e1 como resultado <code>True</code> y eso es lo que retornar\u00e1. Cuando es impar, la comparaci\u00f3n ser\u00e1 <code>False</code>, y la funci\u00f3n retornar\u00e1 ese valor.</p> <p>Escriba una funci\u00f3n que determine el n\u00famero de d\u00edgitos que tiene un n\u00famero entero.</p> In\u00a0[5]: Copied! <pre>def num_digitos(n):\n    nd = 0\n    while n&gt;0:\n        n //= 10\n        nd += 1\n    return nd\n</pre> def num_digitos(n):     nd = 0     while n&gt;0:         n //= 10         nd += 1     return nd <p>Escriba una funci\u00f3n que calcule el discriminante de una ecuaci\u00f3n de segundo grado, dados los valores de $a$, $b$ y $c$:</p> In\u00a0[6]: Copied! <pre>def discriminante(a,b,c):\n    resultado = b**2-4*a*c\n    return resultado\n</pre> def discriminante(a,b,c):     resultado = b**2-4*a*c     return resultado <p>Podemos llamar esta funci\u00f3n, de la siguiente manera:</p> In\u00a0[7]: Copied! <pre>var_resultado = discriminante(1,4,2)\n</pre> var_resultado = discriminante(1,4,2) <p>El resultado que entreg\u00f3 la funci\u00f3n se almacen\u00f3 en la variable var_resultado:</p> In\u00a0[8]: Copied! <pre>var_resultado\n</pre> var_resultado Out[8]: <pre>8</pre> <p>Escriba un programa para resolver las ecuaciones de segundo grado, utilizando la funci\u00f3n anterior.</p> In\u00a0[9]: Copied! <pre>def discriminante(a,b,c):\n    resultado = b**2-4*a*c\n    return resultado\n\np1 = float(input('Ingrese el valor a:'))\np2 = float(input('Ingrese el valor b:'))\np3 = float(input('Ingrese el valor c:'))\n\nvar_resultado = discriminante(p1,p2,p3)\n\nif var_resultado &lt; 0:\n    print('La ecuacion no tiene solucion real')\nelif var_resultado == 0:\n    sol = -p2 / (2*p1)\n    print('La solucion es unica y es sol=', sol)\nelse:\n    sol = (-p2 - (var_resultado**0.5))/(2*p1)\n    sol2 = (-p2 + (var_resultado**0.5))/(2*p1)\n    print('Las soluciones son:')\n    print('sol=', sol)\n    print('sol2=', sol2)\n</pre> def discriminante(a,b,c):     resultado = b**2-4*a*c     return resultado  p1 = float(input('Ingrese el valor a:')) p2 = float(input('Ingrese el valor b:')) p3 = float(input('Ingrese el valor c:'))  var_resultado = discriminante(p1,p2,p3)  if var_resultado &lt; 0:     print('La ecuacion no tiene solucion real') elif var_resultado == 0:     sol = -p2 / (2*p1)     print('La solucion es unica y es sol=', sol) else:     sol = (-p2 - (var_resultado**0.5))/(2*p1)     sol2 = (-p2 + (var_resultado**0.5))/(2*p1)     print('Las soluciones son:')     print('sol=', sol)     print('sol2=', sol2) <pre>Ingrese el valor a:1\nIngrese el valor b:-1\nIngrese el valor c:-12\nLas soluciones son:\nsol= -3.0\nsol2= 4.0\n</pre> <p>Al trabajar con funciones es importante comprender la diferencia entre <code>print</code> y <code>return</code>, pues normalmente quienes est\u00e1n aprendiendo a programar tienden a confundirlas.</p> <p>Anteriormente escribimos programas que recib\u00edan entradas del usuario a trav\u00e9s de <code>input</code> y escrib\u00edan resultados a la pantalla utilizando <code>print</code>. Estos son los principales mecanismos de interacci\u00f3n entre nuestros programas y las personas que los utilizan.</p> <p>Por otra parte, las funciones no interact\u00faan directamente con las personas, sino con otras componentes del programa desde son llamadas y a las cuales les devolvemos resultados. Es decir, a una funci\u00f3n no la llama una persona, sino otra parte del programa.</p> <p>Cuando la funci\u00f3n es llamada, se le proveen los datos que requiere para trabajar a trav\u00e9s de los par\u00e1metros. La funci\u00f3n utiliza esos valores sin necesidad de leerlos (pues ya vienen cargados en los par\u00e1metros) y con ellos lleva a cabo su tarea.</p> <p>Al finalizar, el resultado es entregado a trav\u00e9s de la instrucci\u00f3n <code>return</code>, que har\u00e1 que el valor llegue a la parte del programa donde se hizo el llamado.</p> <p>Recuerda este ejemplo:</p> In\u00a0[10]: Copied! <pre>var_resultado = discriminante(1,4,2)\n</pre> var_resultado = discriminante(1,4,2) <p>Aqu\u00ed llamamos a la funci\u00f3n con los par\u00e1metros que queremos que trabaje. La funci\u00f3n retornar\u00e1 el resultado, que ser\u00e1 almacenado en la variable var_resultado. No hay <code>input</code> y no hay <code>print</code> en esta interacci\u00f3n, pues quienes est\u00e1n interactuando son componentes del programa y no personas.</p> <ul> <li><p>No utilizamos <code>input</code> dentro de una funci\u00f3n. Las entradas que entregan las personas que usan el programa son le\u00eddas en el programa principal, fuera de las funciones.</p> </li> <li><p>No utilizamos <code>print</code> dentro de una funci\u00f3n. Las funciones entregan sus resultados a trav\u00e9s de return, y en el programa principal son entregadas a las personas que usan el programa a trav\u00e9s de <code>print</code>.</p> </li> </ul> In\u00a0[11]: Copied! <pre>def promedio(n1, n2, n3):\n    suma = p1 + p2 + p3\n    prom = suma / 3\n    return prom\n</pre> def promedio(n1, n2, n3):     suma = p1 + p2 + p3     prom = suma / 3     return prom In\u00a0[12]: Copied! <pre>def IMC(est, peso, edad):\n    indice = peso/(est**2)\n    if edad &lt; 45:\n        if indice &lt; 22.0:\n            condicion = 'bajo'\n        else:\n            condicion = 'medio'\n    else:\n        if indice &lt; 22.0:\n            condicion = 'medio'\n        else:\n            condicion = 'alto'\n    return condicion\n</pre> def IMC(est, peso, edad):     indice = peso/(est**2)     if edad &lt; 45:         if indice &lt; 22.0:             condicion = 'bajo'         else:             condicion = 'medio'     else:         if indice &lt; 22.0:             condicion = 'medio'         else:             condicion = 'alto'     return condicion In\u00a0[13]: Copied! <pre>def transformacion(total_min):\n    horas = total_min/60\n    return int(horas)\n\ndef transformacion2(total_min):\n    minutos = total_min%60\n    return minutos\n\nflag = True\ntotal_min = 0\nwhile flag:\n    minutos = int(input('Duracion del tramo: '))\n    if minutos == 0:\n        flag = False\n    else:\n        total_min = total_min + minutos\n\nhoras = transformacion(total_min)\nminutos = transformacion2(total_min)\nprint('Tiempo total de viaje:', horas, 'horas con', minutos, 'minutos')\n</pre> def transformacion(total_min):     horas = total_min/60     return int(horas)  def transformacion2(total_min):     minutos = total_min%60     return minutos  flag = True total_min = 0 while flag:     minutos = int(input('Duracion del tramo: '))     if minutos == 0:         flag = False     else:         total_min = total_min + minutos  horas = transformacion(total_min) minutos = transformacion2(total_min) print('Tiempo total de viaje:', horas, 'horas con', minutos, 'minutos') <pre>Duracion del tramo: 40\nDuracion del tramo: 30\nDuracion del tramo: 60\nDuracion del tramo: 0\nTiempo total de viaje: 2 horas con 10 minutos\n</pre>"},{"location":"05_Funciones.html#funciones","title":"Funciones\u00b6","text":""},{"location":"05_Funciones.html#funciones-predefinidas-y-personalizadas","title":"Funciones predefinidas y personalizadas\u00b6","text":""},{"location":"05_Funciones.html#definicion-de-una-funcion","title":"Definici\u00f3n de una funci\u00f3n\u00b6","text":""},{"location":"05_Funciones.html#llamado-de-la-funcion","title":"Llamado de la funci\u00f3n\u00b6","text":""},{"location":"05_Funciones.html#ejemplo-1","title":"Ejemplo 1\u00b6","text":""},{"location":"05_Funciones.html#ejemplo-2","title":"Ejemplo 2\u00b6","text":""},{"location":"05_Funciones.html#ejemplo-3","title":"Ejemplo 3\u00b6","text":""},{"location":"05_Funciones.html#ejemplo-4","title":"Ejemplo 4\u00b6","text":""},{"location":"05_Funciones.html#diferencia-entre-print-y-return","title":"Diferencia entre <code>print()</code> y <code>return</code>\u00b6","text":""},{"location":"05_Funciones.html#como-regla-general","title":"Como regla general:\u00b6","text":""},{"location":"05_Funciones.html#ejercicios","title":"Ejercicios\u00b6","text":""},{"location":"05_Funciones.html#ejercicio-1","title":"Ejercicio 1\u00b6","text":"<p>Escriba la funci\u00f3n <code>promedio(n1, n2, n3)</code> que reciba las notas de los 3 cert\u00e1menes de la asignatura y retorne el valor del promedio.</p>"},{"location":"05_Funciones.html#ejercicio-2","title":"Ejercicio 2\u00b6","text":"<p>El riesgo  de que una persona  sufra enfermedades coronarias depende de su edad y su \u00edndice de masa corporal.</p> <p>El Indice de masa corporal (IMC)  es el cociente entre el peso del individuo  en kilos y el cuadrado de su estatura en metros.</p> <p>Escriba  una funci\u00f3n que reciba como par\u00e1metros la estatura, el peso y la edad de la persona , y le entregue su condici\u00f3n de riesgo.</p> edad &lt; 45 edad \u2265 45 IMC &lt; 22 bajo medio IMC \u2265 22 medio alto"},{"location":"05_Funciones.html#ejercicio-3","title":"Ejercicio 3\u00b6","text":"<p>Un viajero desea saber cu\u00e1nto tiempo tom\u00f3 un viaje que realiz\u00f3. \u00c9l conoce la duraci\u00f3n (en minutos) de cada uno de los tramos del viaje por separado.</p> <p>Desarrolle un programa, que contenga al menos una funci\u00f3n, que permita ingresar los tiempos de viaje de los tramos y entregue como resultado el tiempo total de viaje en formato: <code>horas</code> horas con <code>minutos</code> minutos</p> <p>El programa deja de pedir tiempos de viaje cuando se ingresa un 0.</p> <p>Ejemplo:</p> <ul> <li>Duraci\u00f3n del tramo: 15</li> <li>Duraci\u00f3n del tramo: 30</li> <li>Duraci\u00f3n del tramo: 87</li> <li>Duraci\u00f3n del tramo: 0</li> <li>Tiempo total de viaje : 2 horas con 12 minutos</li> </ul>"},{"location":"05_Funciones.html#ejercicio-4","title":"Ejercicio 4\u00b6","text":"<p>Realice el ruteo del problema anterior con las siguientes duraciones de tramos: 40, 35, 60, 70.</p>"},{"location":"06_Listas.html","title":"Listas","text":"<p>Una lista es una colecci\u00f3n ordenada de elementos de cualquier tipo, incluso otras listas.</p> <p>Sus elementos individuales pueden accederse a trav\u00e9s de \u00edndices, como con los caracteres de un string. De igual forma, se pueden extraer sublistas utilizando rebanadas.</p> In\u00a0[1]: Copied! <pre>a = []\nb = list()\nprint(a)\nprint(b)\n</pre> a = [] b = list() print(a) print(b) <pre>[]\n[]\n</pre> In\u00a0[2]: Copied! <pre>a = [1,2,3,4]\npalabra = \"hola\"\nb = list([palabra,2,[1,2],'3'])\nprint(a)\nprint(b)\n\nc = list(\"abc\")\nprint(c)\n</pre> a = [1,2,3,4] palabra = \"hola\" b = list([palabra,2,[1,2],'3']) print(a) print(b)  c = list(\"abc\") print(c) <pre>[1, 2, 3, 4]\n['hola', 2, [1, 2], '3']\n['a', 'b', 'c']\n</pre> <p>La funci\u00f3n <code>range</code> genera una secuencia ordenada de n\u00fameros enteros. En conjunto con el constructor <code>list()</code> permite crear una lista con la secuencia generada.</p> <p><code>range(inicio,fin)</code> genera una secuencia ordenada de n\u00fameros enteros ordenados desde $inicio$ hasta $fin-1$.</p> <p>Si se omite el $inicio$, la secuencia va desde $0$ hasta $fin-1$.</p> <p>Aplicando <code>list()</code> construimos una lista con el rango correspondiente.</p> In\u00a0[3]: Copied! <pre>a = list(range(4,10))\nb = list(range(5))\nprint(a)\nprint(b)\n</pre> a = list(range(4,10)) b = list(range(5)) print(a) print(b) <pre>[4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4]\n</pre> <p><code>range(inicio, fin, salto)</code> genera una secuencia ordenada de n\u00fameros enteros, desde $inicio$ hasta $fin-1$, saltando $salto$ entre cada par de n\u00fameros.</p> In\u00a0[4]: Copied! <pre>c = list(range(2,10,3))\nprint(c)\n</pre> c = list(range(2,10,3)) print(c) <pre>[2, 5, 8]\n</pre> <p>Las listas tienen \u00edndices para enumerar sus elementos, de manera similar que con strings.</p> In\u00a0[5]: Copied! <pre>a = [1,2,3,4]\nprint(a[1])\n</pre> a = [1,2,3,4] print(a[1]) <pre>2\n</pre> In\u00a0[6]: Copied! <pre>print(a[10])\n</pre> print(a[10]) <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n/tmp/ipython-input-3397209967.py in &lt;cell line: 0&gt;()\n----&gt; 1 print(a[10])\n\nIndexError: list index out of range</pre> <p>Las listas tambi\u00e9n poseen \u00edndices negativos.</p> In\u00a0[7]: Copied! <pre>a = [1,2,3,4]\n#imprime por pantalla el penultimo elemento de la lista\nprint(a[-2])\n</pre> a = [1,2,3,4] #imprime por pantalla el penultimo elemento de la lista print(a[-2]) <pre>3\n</pre> <p>La notaci\u00f3n <code>l[inicio:fin]</code>, para extraer una rebanada, tambi\u00e9n es v\u00e1lida para listas.</p> In\u00a0[8]: Copied! <pre>a = list(range(2,20))\nprint(a[4:15])\n</pre> a = list(range(2,20)) print(a[4:15]) <pre>[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n</pre> <p>A diferencia de los strings, las listas son mutables, es decir, sus elementos pueden cambiar. El \u00edndice puede ser usado para modificar un elemento de la lista.</p> In\u00a0[9]: Copied! <pre>colores = [\"azul\", \"rojo\", \"verde\", \"amarillo\"]\nprint(\"Lista antes de modificar un elemento por el indice\")\nprint(colores)\ncolores[0] = \"fucsia\"\nprint(\"Lista despues de modificar un elemento por el indice\")\nprint(colores)\n</pre> colores = [\"azul\", \"rojo\", \"verde\", \"amarillo\"] print(\"Lista antes de modificar un elemento por el indice\") print(colores) colores[0] = \"fucsia\" print(\"Lista despues de modificar un elemento por el indice\") print(colores) <pre>Lista antes de modificar un elemento por el indice\n['azul', 'rojo', 'verde', 'amarillo']\nLista despues de modificar un elemento por el indice\n['fucsia', 'rojo', 'verde', 'amarillo']\n</pre> <p>Algunas operaciones de listas son an\u00e1logas a las operaciones de strings:</p> <ul> <li>Concatenaci\u00f3n de lista (<code>+</code>)</li> <li>Repetici\u00f3n de listas (<code>*</code>)</li> <li>Verificar si un elemento est\u00e1 en en la lista</li> <li>Eliminar el elemento i-\u00e9simo de una lista</li> </ul> In\u00a0[10]: Copied! <pre>a = [1,2,3]\nb = [4,6,8]\nc = a + b\nd = b + a\nprint(c)\nprint(d)\n</pre> a = [1,2,3] b = [4,6,8] c = a + b d = b + a print(c) print(d) <pre>[1, 2, 3, 4, 6, 8]\n[4, 6, 8, 1, 2, 3]\n</pre> In\u00a0[11]: Copied! <pre>[1,2] + [2,6]\n</pre> [1,2] + [2,6] Out[11]: <pre>[1, 2, 2, 6]</pre> In\u00a0[12]: Copied! <pre>a = [1,4,6]\nc = a*3\nprint(c)\n</pre> a = [1,4,6] c = a*3 print(c) <pre>[1, 4, 6, 1, 4, 6, 1, 4, 6]\n</pre> In\u00a0[13]: Copied! <pre>a = [1,2,3,4]\nprint(3 in a)\n</pre> a = [1,2,3,4] print(3 in a) <pre>True\n</pre> In\u00a0[14]: Copied! <pre>a = [1,2,3,4,2]\nprint(\"lista antes de eliminar el elemento a[-3]\")\nprint(a)\ndel a[-3]\nprint(\"lista despues de eliminar a[-3]\")\nprint(a)\n</pre> a = [1,2,3,4,2] print(\"lista antes de eliminar el elemento a[-3]\") print(a) del a[-3] print(\"lista despues de eliminar a[-3]\") print(a) <pre>lista antes de eliminar el elemento a[-3]\n[1, 2, 3, 4, 2]\nlista despues de eliminar a[-3]\n[1, 2, 4, 2]\n</pre> In\u00a0[15]: Copied! <pre>a = [1,2,3,4]\nc = len(a)\nprint(\"La cantidad de elementos de la lista es\",c)\n</pre> a = [1,2,3,4] c = len(a) print(\"La cantidad de elementos de la lista es\",c) <pre>La cantidad de elementos de la lista es 4\n</pre> In\u00a0[16]: Copied! <pre>b = [[1,2,3,4]]\nd = len(b[0])\nprint(\"La cantidad de elementos de la lista es\",d)\n</pre> b = [[1,2,3,4]] d = len(b[0]) print(\"La cantidad de elementos de la lista es\",d) <pre>La cantidad de elementos de la lista es 4\n</pre> <p>\u00bfQu\u00e9 ocurre con la cantidad de elementos de las listas vac\u00edas?</p> In\u00a0[17]: Copied! <pre>print(len([]))\n</pre> print(len([])) <pre>0\n</pre> In\u00a0[18]: Copied! <pre>print(len(list()))\n</pre> print(len(list())) <pre>0\n</pre> In\u00a0[19]: Copied! <pre>sum([1,5,3])\n</pre> sum([1,5,3]) Out[19]: <pre>9</pre> In\u00a0[20]: Copied! <pre>sum([1.0,5.4,3])\n</pre> sum([1.0,5.4,3]) Out[20]: <pre>9.4</pre> <p>\u00bfQue hace el siguiente programa?</p> In\u00a0[21]: Copied! <pre>b = 5\na = [1,2,4,b]\nc = sum(a)/len(a)\nprint(round(c))\n</pre> b = 5 a = [1,2,4,b] c = sum(a)/len(a) print(round(c)) <pre>3\n</pre> In\u00a0[22]: Copied! <pre>m = min([1,6,2,-1])\nprint(m)\n</pre> m = min([1,6,2,-1]) print(m) <pre>-1\n</pre> In\u00a0[23]: Copied! <pre>m = max([1,6,2,-1])\nprint(m)\n</pre> m = max([1,6,2,-1]) print(m) <pre>6\n</pre> <ul> <li>Agregar un elemento <code>x</code>: <code>l.append(x)</code></li> <li>Agregar un elemento <code>x</code> en una posici\u00f3n <code>pos</code>: <code>l.insert(pos,x)</code></li> <li>Contar la cantidad de ocurrencias de un elemento <code>x</code>: <code>l.count(x)</code></li> <li>Obtener el \u00edndice de un elemento <code>x</code>: <code>l.index(x)</code></li> <li>Eliminar un elemento <code>x</code>: <code>l.remove(x)</code></li> <li>Invertir una lista: <code>l.reverse()</code></li> <li>Ordenar una lista: <code>l.sort()</code></li> </ul> <p>Importante: recordar que los m\u00e9todos operan sobre una lista impl\u00edcita, indicada antes del punto.</p> In\u00a0[24]: Copied! <pre>a = [1,2,3,4]\nprint(\"lista antes de agregar un elemento\")\nprint(a)\n#agregar un 4 al final de la lista\na.append(4)\nprint(\"lista despues de agregar un elemento\")\nprint(a)\n</pre> a = [1,2,3,4] print(\"lista antes de agregar un elemento\") print(a) #agregar un 4 al final de la lista a.append(4) print(\"lista despues de agregar un elemento\") print(a) <pre>lista antes de agregar un elemento\n[1, 2, 3, 4]\nlista despues de agregar un elemento\n[1, 2, 3, 4, 4]\n</pre> In\u00a0[25]: Copied! <pre>a = [1,2,3,4]\nprint(\"lista antes de agregar un elemento\")\nprint(a)\n#agregar un 10 en a[2]\na.insert(2,10)\nprint(\"lista despues de agregar un elemento\")\nprint(a)\n</pre> a = [1,2,3,4] print(\"lista antes de agregar un elemento\") print(a) #agregar un 10 en a[2] a.insert(2,10) print(\"lista despues de agregar un elemento\") print(a) <pre>lista antes de agregar un elemento\n[1, 2, 3, 4]\nlista despues de agregar un elemento\n[1, 2, 10, 3, 4]\n</pre> In\u00a0[26]: Copied! <pre>a = list(\"paralelepipedo\")\nb = a.count(\"p\")\nprint(b)\n</pre> a = list(\"paralelepipedo\") b = a.count(\"p\") print(b) <pre>3\n</pre> In\u00a0[27]: Copied! <pre>a = [1,2,3,4,3]\n</pre> a = [1,2,3,4,3] In\u00a0[28]: Copied! <pre>a.index(3)\n</pre> a.index(3) Out[28]: <pre>2</pre> In\u00a0[29]: Copied! <pre>a.index(214)\n</pre> a.index(214) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n/tmp/ipython-input-3995662921.py in &lt;cell line: 0&gt;()\n----&gt; 1 a.index(214)\n\nValueError: 214 is not in list</pre> <p>\u00bfC\u00f3mo se puede asegurar que al usar <code>index</code> no habr\u00e1 error?</p> In\u00a0[30]: Copied! <pre>a = [1,2,3,4,3]\nif 214 in a:\n    print(\"El elemento 214 esta en el indice\",a.index(214))\n\nif 3 in a:\n    print(\"El elemento 3 esta en el indice\",a.index(3))\n</pre> a = [1,2,3,4,3] if 214 in a:     print(\"El elemento 214 esta en el indice\",a.index(214))  if 3 in a:     print(\"El elemento 3 esta en el indice\",a.index(3)) <pre>El elemento 3 esta en el indice 2\n</pre> In\u00a0[31]: Copied! <pre>a = [1,2,3,5,3]\nprint(\"lista antes de eliminar el elemento 3\")\nprint(a)\n#eliminar el elemento 3 de la lista\na.remove(3)\nprint(\"lista despues de eliminar\")\nprint(a)\n</pre> a = [1,2,3,5,3] print(\"lista antes de eliminar el elemento 3\") print(a) #eliminar el elemento 3 de la lista a.remove(3) print(\"lista despues de eliminar\") print(a) <pre>lista antes de eliminar el elemento 3\n[1, 2, 3, 5, 3]\nlista despues de eliminar\n[1, 2, 5, 3]\n</pre> In\u00a0[32]: Copied! <pre>a.remove(7)\n</pre> a.remove(7) <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n/tmp/ipython-input-4132852758.py in &lt;cell line: 0&gt;()\n----&gt; 1 a.remove(7)\n\nValueError: list.remove(x): x not in list</pre> <p>\u00bfC\u00f3mo se puede evitar este error al intentar eliminar un elemento?</p> In\u00a0[33]: Copied! <pre>a = [1,2,3,5,3]\nif 7 in a:\n    a.remove(7)\n</pre> a = [1,2,3,5,3] if 7 in a:     a.remove(7) In\u00a0[34]: Copied! <pre>a = [4,1,10,5]\nprint(\"lista antes de invertir\")\nprint(a)\na.reverse()\nprint(\"lista despues de invertir\")\nprint(a)\n</pre> a = [4,1,10,5] print(\"lista antes de invertir\") print(a) a.reverse() print(\"lista despues de invertir\") print(a) <pre>lista antes de invertir\n[4, 1, 10, 5]\nlista despues de invertir\n[5, 10, 1, 4]\n</pre> In\u00a0[35]: Copied! <pre>a = [4,1,10,6]\nprint(\"lista antes de ordenar\")\nprint(a)\na.sort()\nprint(\"lista despues de ordenar\")\nprint(a)\n</pre> a = [4,1,10,6] print(\"lista antes de ordenar\") print(a) a.sort() print(\"lista despues de ordenar\") print(a) <pre>lista antes de ordenar\n[4, 1, 10, 6]\nlista despues de ordenar\n[1, 4, 6, 10]\n</pre> <p>\u00bfC\u00f3mo ordenar los elementos de una lista en orden decreciente?</p> In\u00a0[36]: Copied! <pre>a = [4,1,10,6]\nprint(\"lista antes de ordenar\")\nprint(a)\na.sort()\na.reverse()\nprint(\"lista despues de ordenar\")\nprint(a)\n</pre> a = [4,1,10,6] print(\"lista antes de ordenar\") print(a) a.sort() a.reverse() print(\"lista despues de ordenar\") print(a) <pre>lista antes de ordenar\n[4, 1, 10, 6]\nlista despues de ordenar\n[10, 6, 4, 1]\n</pre> In\u00a0[37]: Copied! <pre>lista = [1,4,\"s\",[1,5]]\nfor elem in lista:\n    print(\"elem =\",elem)\n</pre> lista = [1,4,\"s\",[1,5]] for elem in lista:     print(\"elem =\",elem) <pre>elem = 1\nelem = 4\nelem = s\nelem = [1, 5]\n</pre> In\u00a0[38]: Copied! <pre>suma = 0\nfor k in range(3,6):\n    suma += k**2\nprint(suma)\n</pre> suma = 0 for k in range(3,6):     suma += k**2 print(suma) <pre>50\n</pre> In\u00a0[39]: Copied! <pre>for i in range(5):\n    print(\"hola persona \"+str(i+1))\n</pre> for i in range(5):     print(\"hola persona \"+str(i+1)) <pre>hola persona 1\nhola persona 2\nhola persona 3\nhola persona 4\nhola persona 5\n</pre> In\u00a0[40]: Copied! <pre>for i in range(2,5):\n    print(i)\n</pre> for i in range(2,5):     print(i) <pre>2\n3\n4\n</pre> In\u00a0[41]: Copied! <pre>contador = 0\nsuma = 0\nwhile contador &lt; 5:\n    suma += contador\n    contador += 1\nprint(\"La suma es igual a\",suma)\n</pre> contador = 0 suma = 0 while contador &lt; 5:     suma += contador     contador += 1 print(\"La suma es igual a\",suma) <pre>La suma es igual a 10\n</pre> In\u00a0[42]: Copied! <pre>suma = 0\nfor contador in range(5):\n    suma += contador\nprint(\"La suma es igual a\",suma)\n</pre> suma = 0 for contador in range(5):     suma += contador print(\"La suma es igual a\",suma) <pre>La suma es igual a 10\n</pre> In\u00a0[43]: Copied! <pre>ramos = [\"Progra\", \"Mate\", \"Fisica\"]\ni = 0\nwhile i &lt; len(ramos):\n    print(\"Tengo clases de\",ramos[i])\n    i += 1\n</pre> ramos = [\"Progra\", \"Mate\", \"Fisica\"] i = 0 while i &lt; len(ramos):     print(\"Tengo clases de\",ramos[i])     i += 1 <pre>Tengo clases de Progra\nTengo clases de Mate\nTengo clases de Fisica\n</pre> In\u00a0[44]: Copied! <pre>ramos = [\"Progra\", \"Mate\", \"Fisica\"]\nfor ramo in ramos:\n    print(\"Tengo clases de\",ramo)\n</pre> ramos = [\"Progra\", \"Mate\", \"Fisica\"] for ramo in ramos:     print(\"Tengo clases de\",ramo) <pre>Tengo clases de Progra\nTengo clases de Mate\nTengo clases de Fisica\n</pre> In\u00a0[45]: Copied! <pre>ramos = [\"Progra\", \"Mate\", \"Fisica\"]\nhoras = [\"8:00\", \"10:00\", \"12:00\"]\ni = 0\nwhile i &lt; len(ramos):\n    print(\"Tengo clases de\",ramos[i],\"a las\", horas[i])\n    i += 1\n</pre> ramos = [\"Progra\", \"Mate\", \"Fisica\"] horas = [\"8:00\", \"10:00\", \"12:00\"] i = 0 while i &lt; len(ramos):     print(\"Tengo clases de\",ramos[i],\"a las\", horas[i])     i += 1 <pre>Tengo clases de Progra a las 8:00\nTengo clases de Mate a las 10:00\nTengo clases de Fisica a las 12:00\n</pre> In\u00a0[46]: Copied! <pre>ramos = [\"Progra\", \"Mate\", \"Fisica\"]\nhoras = [\"8:00\", \"10:00\", \"12:00\"]\nprint(list(range(len(ramos))))\nfor i in range(len(ramos)):\n    print(\"Tengo clases de\",ramos[i],\"a las\", horas[i])\n</pre> ramos = [\"Progra\", \"Mate\", \"Fisica\"] horas = [\"8:00\", \"10:00\", \"12:00\"] print(list(range(len(ramos)))) for i in range(len(ramos)):     print(\"Tengo clases de\",ramos[i],\"a las\", horas[i]) <pre>[0, 1, 2]\nTengo clases de Progra a las 8:00\nTengo clases de Mate a las 10:00\nTengo clases de Fisica a las 12:00\n</pre> <ul> <li><p>Las listas bi-dimensionales se caracterizan por que al menos un elemento de la lista es,  a su vez, otra lista.</p> </li> <li><p>Tambien se les llama: listas de listas o listas anidadas.</p> </li> <li><p>Las listas de listas tienen las mismas caractersiticas que una lista normal (o uni-dimensional). Es decir:</p> <ol> <li>Se les puede aplicar los m\u00e9todos ya vistos: <code>.append()</code>, <code>.sort()</code>, <code>.remove()</code>, etc.</li> <li>Estas listas pueden tener cualquier tama\u00f1o, incluso pueden crearse como listas vacias.</li> <li>Pueden contener cualquier tipo de dato.</li> </ol> </li> </ul> <p>Ejemplo de listas de listas pueden ser:</p> In\u00a0[47]: Copied! <pre>L1 = [1,2,3, [4,5,6,7,8], 9]\nL2 = [True, 234, [1988, 4, 12], 'lista de listas', [False, '789']]\nL3 = [[],[]]\nprint('Lista L1:', L1)\nprint('Lista L2:', L2)\nprint('Lista L3:', L3)\n</pre> L1 = [1,2,3, [4,5,6,7,8], 9] L2 = [True, 234, [1988, 4, 12], 'lista de listas', [False, '789']] L3 = [[],[]] print('Lista L1:', L1) print('Lista L2:', L2) print('Lista L3:', L3) <pre>Lista L1: [1, 2, 3, [4, 5, 6, 7, 8], 9]\nLista L2: [True, 234, [1988, 4, 12], 'lista de listas', [False, '789']]\nLista L3: [[], []]\n</pre> <p>Se debe tener conciencia que en estos casos, los elementos de las listas pueden ser elementos que pueden contener a su vez otros elementos.</p> <p>Ejemplo:</p> <p>Los elementos de la lista <code>L1</code> son 5: <code>1, 2, 3, [4, 5, 6, 7, 8], 9</code>.</p> <p>Entonces, el cuarto elemento, es decir el elemento con el \u00edndice 3, es: <code>[4, 5, 6, 7, 8]</code>.</p> In\u00a0[48]: Copied! <pre>print(L1[3])\n</pre> print(L1[3]) <pre>[4, 5, 6, 7, 8]\n</pre> In\u00a0[49]: Copied! <pre>print(L1[-1])\n</pre> print(L1[-1]) <pre>9\n</pre> <p>Entonces, teniendo las listas <code>L1</code>, <code>L2</code>, y <code>L3</code></p> In\u00a0[50]: Copied! <pre>print('Lista L1:', L1)\nprint('Lista L2:', L2)\nprint('Lista L3:', L3)\n</pre> print('Lista L1:', L1) print('Lista L2:', L2) print('Lista L3:', L3) <pre>Lista L1: [1, 2, 3, [4, 5, 6, 7, 8], 9]\nLista L2: [True, 234, [1988, 4, 12], 'lista de listas', [False, '789']]\nLista L3: [[], []]\n</pre> <p>\u00bfQu\u00e9 nos entrega las siguientes instrucciones?</p> In\u00a0[51]: Copied! <pre>v1 = L2[0]\nv2 = L2[-1]\nv3 = L3[1]\nv4 = L1[3:]\nv5 = L1[:3]\nv6 = L2[2:3]\n</pre> v1 = L2[0] v2 = L2[-1] v3 = L3[1] v4 = L1[3:] v5 = L1[:3] v6 = L2[2:3] In\u00a0[52]: Copied! <pre>print(v1)\nprint(v2)\nprint(v3)\nprint(v4)\nprint(v5)\nprint(v6)\n</pre> print(v1) print(v2) print(v3) print(v4) print(v5) print(v6) <pre>True\n[False, '789']\n[]\n[[4, 5, 6, 7, 8], 9]\n[1, 2, 3]\n[[1988, 4, 12]]\n</pre> <p>El manejo de \u00edndices en listas de listas aumenta un poco su complejidad, pero es importante entenderlo ya que es posible obtener cualquier valor y esto facilita mucho el trabajo.</p> <p>Hasta ahora sabemos que para obtener el valor de un elemento de una lista es necesario usar los par\u00e9ntesis cuadrados o corchetes, <code>[ ]</code>.</p> <p>Este operador (operador rebanador) nos permite acceder a elementos de un iterable, es decir: lista y string.</p> <p>Entonces, podemos usar tantas veces como queramos el operador rebanador, siempre y cuando tengamos al lado izquierda una lista o un string.</p> <p>Volvamos al ejemplo anterior, es decir, con las listas <code>L1</code>, <code>L2</code>, y <code>L3</code></p> In\u00a0[53]: Copied! <pre>print('Lista L1:', L1)\nprint('Lista L2:', L2)\nprint('Lista L3:', L3)\n</pre> print('Lista L1:', L1) print('Lista L2:', L2) print('Lista L3:', L3) <pre>Lista L1: [1, 2, 3, [4, 5, 6, 7, 8], 9]\nLista L2: [True, 234, [1988, 4, 12], 'lista de listas', [False, '789']]\nLista L3: [[], []]\n</pre> <p>Si sabemos que: <code>L1[3]</code> es la lista <code>[4, 5, 6, 7, 8]</code>, entonces podemos obtener el primer elemento de la siguiente manera:</p> In\u00a0[54]: Copied! <pre>sub_lista = L1[3]\nprimer_elem = sub_lista[0]\nprint('El primer elemento de la sublista es:',primer_elem)\n</pre> sub_lista = L1[3] primer_elem = sub_lista[0] print('El primer elemento de la sublista es:',primer_elem) <pre>El primer elemento de la sublista es: 4\n</pre> <p>De una manera abreviada, y m\u00e1s conveniente, podemos escribir lo mismo de la siguiente manera:</p> In\u00a0[55]: Copied! <pre>primer_elem = L1[3][0]\nprint('El primer elemento de la sublista es:',primer_elem)\n</pre> primer_elem = L1[3][0] print('El primer elemento de la sublista es:',primer_elem) <pre>El primer elemento de la sublista es: 4\n</pre> <p>Los par\u00e9ntesis corchetes: <code>[ ]</code>, permiten acceder a la ubicaci\u00f3n que le damos con el valor entero (positivo o negativo), pero adem\u00e1s, es posible realizar esto tantas veces como queramos siempre y cuando lo que este a lado izquierda sea una lista o un string.</p> <p>Otro ejemplo: vamos a acceder a la palabra \"de\" del string \"listas de listas\" de la lista <code>L2</code>.</p> In\u00a0[56]: Copied! <pre>print('Lista L2:', L2)\n</pre> print('Lista L2:', L2) <pre>Lista L2: [True, 234, [1988, 4, 12], 'lista de listas', [False, '789']]\n</pre> In\u00a0[57]: Copied! <pre>string_completo = L2[3]\npalabra_de = string_completo[6:8]\nprint(palabra_de)\n</pre> string_completo = L2[3] palabra_de = string_completo[6:8] print(palabra_de) <pre>de\n</pre> <p>De manera abreviada, y m\u00e1s conveniente seria:</p> In\u00a0[58]: Copied! <pre>print(L2[3][6:8])\n</pre> print(L2[3][6:8]) <pre>de\n</pre> <p>Entonces, \u00bfqu\u00e9 nos entrega las siguientes instrucciones?</p> In\u00a0[59]: Copied! <pre>print('Lista L1:', L1)\nprint('Lista L2:', L2)\nprint('Lista L3:', L3)\n</pre> print('Lista L1:', L1) print('Lista L2:', L2) print('Lista L3:', L3) <pre>Lista L1: [1, 2, 3, [4, 5, 6, 7, 8], 9]\nLista L2: [True, 234, [1988, 4, 12], 'lista de listas', [False, '789']]\nLista L3: [[], []]\n</pre> In\u00a0[60]: Copied! <pre>x1 = L1[3][-1]\nx2 = L2[-1][0]\nx3 = L2[3][9:]\n</pre> x1 = L1[3][-1] x2 = L2[-1][0] x3 = L2[3][9:] In\u00a0[61]: Copied! <pre>print(x1)\nprint(x2)\nprint(x3)\n</pre> print(x1) print(x2) print(x3) <pre>8\nFalse\nlistas\n</pre> <p>\u00bfY si generalizamos incluyendo m\u00e1s par\u00e9ntesis corchetes?</p> In\u00a0[62]: Copied! <pre>z1 = L1[3:][0][1]\nz2 = L2[:][-1][-1][-1]\nz3 = L2[::-1][1][::-1]\n</pre> z1 = L1[3:][0][1] z2 = L2[:][-1][-1][-1] z3 = L2[::-1][1][::-1] In\u00a0[63]: Copied! <pre>print(z1)\nprint(z2)\nprint(z3)\n</pre> print(z1) print(z2) print(z3) <pre>5\n9\nsatsil ed atsil\n</pre> <p>La forma de recorrer las listas mediante <code>for</code> es muy sencilla. Se debe seguir las mismas reglas que para recorrer una lista uni-dimensional.</p> <p>Se debe poner atenci\u00f3n que valores toma ahora la variable que se crea en el <code>for</code>.</p> <p>Veamos un ejemplo:</p> In\u00a0[64]: Copied! <pre>print('Lista L2:', L2)\n</pre> print('Lista L2:', L2) <pre>Lista L2: [True, 234, [1988, 4, 12], 'lista de listas', [False, '789']]\n</pre> In\u00a0[65]: Copied! <pre>for elemento in L2:\n    print('Valor de la variable elemento:', elemento)\n</pre> for elemento in L2:     print('Valor de la variable elemento:', elemento) <pre>Valor de la variable elemento: True\nValor de la variable elemento: 234\nValor de la variable elemento: [1988, 4, 12]\nValor de la variable elemento: lista de listas\nValor de la variable elemento: [False, '789']\n</pre> <p>Veamos otro ejemplo:</p> In\u00a0[66]: Copied! <pre>ramos = [['Progra','IWI-131', 3],\n         ['Mate', 'MAT-021', 5],\n         ['Fisica', 'FIS-100', 3],\n         ['Ed.Fisica', 'DEW-100', 1],\n         ['Inmanente', 'HRW-102', 2],\n        ]\n\nfor nombre, sigla, c in ramos: # 3 variables en vez de 1\n    print(nombre, 'tiene', c, 'creditos')\n</pre> ramos = [['Progra','IWI-131', 3],          ['Mate', 'MAT-021', 5],          ['Fisica', 'FIS-100', 3],          ['Ed.Fisica', 'DEW-100', 1],          ['Inmanente', 'HRW-102', 2],         ]  for nombre, sigla, c in ramos: # 3 variables en vez de 1     print(nombre, 'tiene', c, 'creditos') <pre>Progra tiene 3 creditos\nMate tiene 5 creditos\nFisica tiene 3 creditos\nEd.Fisica tiene 1 creditos\nInmanente tiene 2 creditos\n</pre> <p>En la l\u00ednea del <code>for</code> ahora hay 3 variables en vez de 1. Esto es posible ya que sabemos que cada elemento de la lista ramos, siempre, tendr\u00e1 3 elementos.</p> <p>La lista ramos es una lista de listas, donde cada sub-lista siempre tiene 3 elementos.</p> <p>Cada variable creada en la linea del <code>for</code>, tomar\u00e1 cada valor de las sub-listas. Esto ser\u00e1 en orden, es decir: primera variable con el primer elemento de la sub-lista, y as\u00ed sucesivamente.</p> <p>Siguiendo el ejemplo anterior, es posible recorrer cada sub-lista para as\u00ed obtener cada elemento uno por uno sin que falte ninguno. Esto se hace con un <code>for</code> adicional:</p> In\u00a0[67]: Copied! <pre>ramos = [['Progra','IWI-131', 3],\n         ['Mate', 'MAT-021', 5],\n         ['Fisica', 'FIS-100', 3],\n         ['Ed.Fisica', 'DEW-100', 1],\n         ['Inmanente', 'HRW-102', 2],\n        ]\n\nfor asignatura in ramos:\n    print('Valor de la variable asignatura:', asignatura)\n    for dato in asignatura:\n        print('Valor de la variable dato:', dato)\n</pre> ramos = [['Progra','IWI-131', 3],          ['Mate', 'MAT-021', 5],          ['Fisica', 'FIS-100', 3],          ['Ed.Fisica', 'DEW-100', 1],          ['Inmanente', 'HRW-102', 2],         ]  for asignatura in ramos:     print('Valor de la variable asignatura:', asignatura)     for dato in asignatura:         print('Valor de la variable dato:', dato) <pre>Valor de la variable asignatura: ['Progra', 'IWI-131', 3]\nValor de la variable dato: Progra\nValor de la variable dato: IWI-131\nValor de la variable dato: 3\nValor de la variable asignatura: ['Mate', 'MAT-021', 5]\nValor de la variable dato: Mate\nValor de la variable dato: MAT-021\nValor de la variable dato: 5\nValor de la variable asignatura: ['Fisica', 'FIS-100', 3]\nValor de la variable dato: Fisica\nValor de la variable dato: FIS-100\nValor de la variable dato: 3\nValor de la variable asignatura: ['Ed.Fisica', 'DEW-100', 1]\nValor de la variable dato: Ed.Fisica\nValor de la variable dato: DEW-100\nValor de la variable dato: 1\nValor de la variable asignatura: ['Inmanente', 'HRW-102', 2]\nValor de la variable dato: Inmanente\nValor de la variable dato: HRW-102\nValor de la variable dato: 2\n</pre>"},{"location":"06_Listas.html#estructura-de-datos-listas","title":"Estructura de datos: Listas\u00b6","text":""},{"location":"06_Listas.html#listas","title":"Listas\u00b6","text":""},{"location":"06_Listas.html#creacion-de-listas","title":"Creaci\u00f3n de Listas\u00b6","text":"<ul> <li>Usando corchetes: <code>[]</code></li> <li>Usando el constructor: <code>list()</code></li> </ul>"},{"location":"06_Listas.html#lista-vacia","title":"Lista vac\u00eda\u00b6","text":""},{"location":"06_Listas.html#lista-con-elementos","title":"Lista con elementos\u00b6","text":""},{"location":"06_Listas.html#rangos","title":"Rangos\u00b6","text":""},{"location":"06_Listas.html#indices","title":"\u00cdndices\u00b6","text":""},{"location":"06_Listas.html#mutabilidad","title":"Mutabilidad\u00b6","text":""},{"location":"06_Listas.html#operaciones-sobre-listas","title":"Operaciones sobre listas\u00b6","text":""},{"location":"06_Listas.html#concatenacion-de-listas","title":"Concatenaci\u00f3n de listas\u00b6","text":"<p>El operador suma (<code>+</code>) crea una nueva lista como la concatenaci\u00f3n de las dos listas utilizadas como operandos.</p>"},{"location":"06_Listas.html#repeticion-de-listas","title":"Repetici\u00f3n de listas\u00b6","text":"<p>El operador multiplicaci\u00f3n (<code>*</code>) crea una nueva lista como la repetici\u00f3n de la lista que aparece como operando, la cantidad de veces indicada.</p>"},{"location":"06_Listas.html#verificar-si-elemento-se-encuentra-en-la-lista","title":"Verificar si elemento se encuentra en la lista\u00b6","text":"<p>La instrucci\u00f3n <code>in</code> permite verificar si un elemento est\u00e1 contenido en la lista.</p>"},{"location":"06_Listas.html#eliminar-un-elemento-de-la-lista","title":"Eliminar un elemento de la lista\u00b6","text":"<ul> <li>Utilizando la instrucci\u00f3n <code>del</code>, es posible eliminar un elemento de la lista.</li> <li>Se debe indicar el \u00edndice del elemento de la lista a eliminar.</li> </ul>"},{"location":"06_Listas.html#funciones-que-aceptan-listas-como-parametros","title":"Funciones que aceptan listas como par\u00e1metros\u00b6","text":""},{"location":"06_Listas.html#longitud-de-una-lista","title":"Longitud de una lista\u00b6","text":"<p>La funci\u00f3n <code>len(lista)</code> entrega la cantidad de elementos de la lista ingresada como par\u00e1metro.</p>"},{"location":"06_Listas.html#suma-de-los-valores-de-una-lista","title":"Suma de los valores de una lista\u00b6","text":"<p>Usando la funci\u00f3n <code>sum(lista)</code>, se puede determinar la suma de los elementos de una lista.</p>"},{"location":"06_Listas.html#minimo-en-una-lista-de-elementos","title":"M\u00ednimo en una lista de elementos\u00b6","text":"<p>La funci\u00f3n <code>min(lista)</code> entrega el valor m\u00ednimo en la <code>lista</code> ingresada como par\u00e1metro.</p>"},{"location":"06_Listas.html#maximo-en-una-lista-de-elementos","title":"M\u00e1ximo en una lista de elementos\u00b6","text":"<p>La funci\u00f3n <code>max(lista)</code> entrega el valor m\u00e1ximo en la <code>lista</code> ingresada como par\u00e1metro.</p>"},{"location":"06_Listas.html#metodos-para-listas","title":"M\u00e9todos para listas\u00b6","text":""},{"location":"06_Listas.html#agregar-un-elemento","title":"Agregar un elemento\u00b6","text":"<ul> <li>Usando <code>append</code>, se agregar\u00e1 un elemento al final de la lista.</li> </ul>"},{"location":"06_Listas.html#agregar-un-elemento-en-una-posicion","title":"Agregar un elemento en una posici\u00f3n\u00b6","text":"<p>Usando el m\u00e9todo <code>insert</code> se puede agregar un elemento en la lista en la posici\u00f3n i-\u00e9sima ingresada como par\u00e1metro.</p>"},{"location":"06_Listas.html#contar-la-aparicion-de-un-elemento-en-una-lista","title":"Contar la aparici\u00f3n de un elemento en una lista\u00b6","text":"<p>El m\u00e9todo <code>count</code> cuenta cu\u00e1ntas veces aparece un elemento en la lista.</p>"},{"location":"06_Listas.html#indice-de-un-elemento","title":"\u00cdndice de un elemento\u00b6","text":"<ul> <li>El m\u00e9todo <code>index</code> entrega la posici\u00f3n de un elemento en la lista.</li> <li>Si hay m\u00e1s de un elemento en la lista, entrega la posici\u00f3n del primer elemento (sentido izquierda - derecha).</li> <li>El elemento debe existir.</li> </ul>"},{"location":"06_Listas.html#eliminar-un-elemento-de-una-lista","title":"Eliminar un elemento de una lista\u00b6","text":"<ul> <li>El m\u00e9todo <code>remove</code> elimina el elemento ingresado como par\u00e1metro.</li> <li>Si hay m\u00e1s de un elemento en la lista, elimina el primer elemento (sentido izquierda - derecha).</li> <li>El elemento debe existir en la lista.</li> </ul>"},{"location":"06_Listas.html#invertir-una-lista","title":"Invertir una lista\u00b6","text":"<p>El m\u00e9todo <code>reverse</code> invierte el orden de los elementos de una lista.</p>"},{"location":"06_Listas.html#ordenar-una-lista","title":"Ordenar una lista\u00b6","text":"<p>El m\u00e9todo <code>sort</code> ordena los elementos de una lista en orden creciente.</p>"},{"location":"06_Listas.html#ciclo-for-en-listas","title":"Ciclo <code>for</code> en listas\u00b6","text":"<ul> <li>Un ciclo <code>for</code> puede ser usado para iterar sobre listas.</li> </ul>"},{"location":"06_Listas.html#utilizando-range-en-un-ciclo-for","title":"Utilizando <code>range</code> en un ciclo <code>for</code>\u00b6","text":""},{"location":"06_Listas.html#equivalencia-entre-ciclo-while-y-ciclo-for","title":"Equivalencia entre ciclo <code>while</code> y ciclo <code>for</code>\u00b6","text":"<p>\u00bfSon equivalentes los siguientes c\u00f3digos?</p>"},{"location":"06_Listas.html#iteracion-de-listas-usando-ciclo-while-y-ciclo-for","title":"Iteraci\u00f3n de listas usando ciclo <code>while</code> y ciclo <code>for</code>\u00b6","text":""},{"location":"06_Listas.html#listas-bi-dimensionales","title":"Listas Bi-dimensionales\u00b6","text":""},{"location":"06_Listas.html#manejo-de-indices","title":"Manejo de \u00edndices\u00b6","text":""},{"location":"06_Listas.html#recorrerlas-mediante-for","title":"Recorrerlas mediante <code>for</code>\u00b6","text":""},{"location":"07_Diccionarios.html","title":"Diccionarios","text":"<p>Un diccionario es una colecci\u00f3n no ordenada que permite asociar llaves con valores. Utilizando la llave siempre es posible recuperar, de manera eficiente, el valor asociado.</p> <ul> <li>El funcionamiento de diccionarios es similar a cuando se recupera un elemento de una lista usando su \u00edndice: <code>L[i]</code></li> <li>En este caso el \u00edndice de la lista es una ''llave'' y el elemento recuperado es el ''valor''</li> </ul> In\u00a0[1]: Copied! <pre>L = [1, 3, 4, 2, 4]\n#imprimiendo el elemento del indice 3 de la lista L\nprint(L[3])\n</pre> L = [1, 3, 4, 2, 4] #imprimiendo el elemento del indice 3 de la lista L print(L[3]) <pre>2\n</pre> <ul> <li>En diccionarios, las llaves pueden ser: n\u00fameros (int o float), strings o listas.</li> <li>Las llaves en un diccionario deben ser \u00fanicas, es decir, una llave no puede aparecer dos veces.</li> </ul> In\u00a0[2]: Copied! <pre>#diccionario de telefonos\n#llaves: nombres de personas (string)\n#valores: numeros de telefono asociados a cada nombre (int)\ntelefonos = {'Jaimito':5551428, 'Yayita': 5550012, 'Pepito':5552437}\n\n#mostrar por pantalla el telefono de Pepito\nprint(telefonos['Pepito'])\n</pre> #diccionario de telefonos #llaves: nombres de personas (string) #valores: numeros de telefono asociados a cada nombre (int) telefonos = {'Jaimito':5551428, 'Yayita': 5550012, 'Pepito':5552437}  #mostrar por pantalla el telefono de Pepito print(telefonos['Pepito']) <pre>5552437\n</pre> In\u00a0[3]: Copied! <pre>dicc1 = {}\ndicc2 = dict()\nprint(dicc1)\nprint(dicc2)\n</pre> dicc1 = {} dicc2 = dict() print(dicc1) print(dicc2) <pre>{}\n{}\n</pre> <p>Un diccionario con elementos, consiste de pares llave-valor.</p> <ul> <li>El diccionario est\u00e1 delimitado por par\u00e9ntesis de llave <code>{ }</code>.</li> <li>Cada par llave-valor se separa del resto con coma <code>,</code>.</li> <li>Cada llave se separa de su valor utilizando el caracter dos puntos <code>:</code>.</li> </ul> <p>Considerar el siguiente diccionario que relaciona animales (llaves) con la cantidad de patas que tienen (valores).</p> In\u00a0[4]: Copied! <pre>patas = {'humano': 2, 'pulpo': 8, 'perro': 4, 'gato': 4}\n</pre> patas = {'humano': 2, 'pulpo': 8, 'perro': 4, 'gato': 4} In\u00a0[5]: Copied! <pre>patas = {'humano': 2, 'pulpo': 8, 'perro': 5, 'gato': 4}\nprint(\"Diccionario antes de agregar un valor\")\nprint(patas)\npatas['cienpies'] = 100\nprint(\"Diccionario despues de agregar un valor\")\nprint(patas)\n</pre> patas = {'humano': 2, 'pulpo': 8, 'perro': 5, 'gato': 4} print(\"Diccionario antes de agregar un valor\") print(patas) patas['cienpies'] = 100 print(\"Diccionario despues de agregar un valor\") print(patas) <pre>Diccionario antes de agregar un valor\n{'humano': 2, 'pulpo': 8, 'perro': 5, 'gato': 4}\nDiccionario despues de agregar un valor\n{'humano': 2, 'pulpo': 8, 'perro': 5, 'gato': 4, 'cienpies': 100}\n</pre> In\u00a0[6]: Copied! <pre>#los perros en realidad tienen cuatro patas, cambiar valor en el diccionario\npatas[\"perro\"] = 4\nprint(\"Diccionario despues de cambiar un valor\")\nprint(patas)\n</pre> #los perros en realidad tienen cuatro patas, cambiar valor en el diccionario patas[\"perro\"] = 4 print(\"Diccionario despues de cambiar un valor\") print(patas) <pre>Diccionario despues de cambiar un valor\n{'humano': 2, 'pulpo': 8, 'perro': 4, 'gato': 4, 'cienpies': 100}\n</pre> In\u00a0[7]: Copied! <pre>patas =  {'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4}\nprint(\"Diccionario antes de eliminar un elemento\")\nprint(patas)\n#eliminando el elemento del diccionario\ndel patas[\"pulpo\"]\nprint(\"Diccionario despues de eliminar un elemento\")\nprint(patas)\n</pre> patas =  {'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4} print(\"Diccionario antes de eliminar un elemento\") print(patas) #eliminando el elemento del diccionario del patas[\"pulpo\"] print(\"Diccionario despues de eliminar un elemento\") print(patas) <pre>Diccionario antes de eliminar un elemento\n{'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4}\nDiccionario despues de eliminar un elemento\n{'cienpies': 100, 'humano': 2, 'gato': 4, 'perro': 4}\n</pre> <p>Al igual que en listas, al intentar eliminar un elemento que no existe (porque no existe la llave en el diccionario) ocurre un error.</p> In\u00a0[8]: Copied! <pre>patas =  {'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4}\n#intentando eliminar un elemento en el diccionario\ndel patas[\"oso\"]\n</pre> patas =  {'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4} #intentando eliminar un elemento en el diccionario del patas[\"oso\"] <pre>\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n/tmp/ipython-input-2859012116.py in &lt;cell line: 0&gt;()\n      1 patas =  {'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4}\n      2 #intentando eliminar un elemento en el diccionario\n----&gt; 3 del patas[\"oso\"]\n\nKeyError: 'oso'</pre> In\u00a0[9]: Copied! <pre>patas =  {'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4}\n#accediendo y mostrando por pantalla la cantidad de patas de un gato\nprint(\"El gato tiene\",patas['gato'],\"patas\")\n</pre> patas =  {'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4} #accediendo y mostrando por pantalla la cantidad de patas de un gato print(\"El gato tiene\",patas['gato'],\"patas\") <pre>El gato tiene 4 patas\n</pre> In\u00a0[10]: Copied! <pre>#intentando mostrar las patas que tiene un oso\nprint(\"El oso tiene\",patas['oso'],\"patas\")\n</pre> #intentando mostrar las patas que tiene un oso print(\"El oso tiene\",patas['oso'],\"patas\") <pre>\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n/tmp/ipython-input-2996996562.py in &lt;cell line: 0&gt;()\n      1 #intentando mostrar las patas que tiene un oso\n----&gt; 2 print(\"El oso tiene\",patas['oso'],\"patas\")\n\nKeyError: 'oso'</pre> In\u00a0[11]: Copied! <pre>patas =  {'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4}\nprint(len(patas))\n</pre> patas =  {'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4} print(len(patas)) <pre>5\n</pre> In\u00a0[12]: Copied! <pre>patas =  {'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4}\nprint('pulpo' in patas)\nprint(8 in patas)\n</pre> patas =  {'cienpies': 100, 'humano': 2, 'gato': 4, 'pulpo': 8, 'perro': 4} print('pulpo' in patas) print(8 in patas) <pre>True\nFalse\n</pre> <p>Considere el diccionario <code>capitales</code>, donde las llaves corresponden a pa\u00edses y los valores son las capitales respectivas de cada pa\u00eds.</p> In\u00a0[13]: Copied! <pre>capitales = {'Chile': 'Santiago', 'Peru': 'Lima', 'Ecuador': 'Quito'}\nfor pa in capitales:\n    #que esta imprimiendo en cada iteracion del ciclo?\n    print(\"pa =\",pa)\n</pre> capitales = {'Chile': 'Santiago', 'Peru': 'Lima', 'Ecuador': 'Quito'} for pa in capitales:     #que esta imprimiendo en cada iteracion del ciclo?     print(\"pa =\",pa) <pre>pa = Chile\npa = Peru\npa = Ecuador\n</pre> In\u00a0[14]: Copied! <pre>capitales = {'Chile': 'Santiago', 'Peru': 'Lima', 'Ecuador': 'Quito'}\nfor pais in capitales:\n    #que se esta imprimiendo en cada iteracion del ciclo?\n    print(\"La capital de\",pais,\"es\",capitales[pais])\n</pre> capitales = {'Chile': 'Santiago', 'Peru': 'Lima', 'Ecuador': 'Quito'} for pais in capitales:     #que se esta imprimiendo en cada iteracion del ciclo?     print(\"La capital de\",pais,\"es\",capitales[pais]) <pre>La capital de Chile es Santiago\nLa capital de Peru es Lima\nLa capital de Ecuador es Quito\n</pre> <p>Sintaxis gen\u00e9rica:</p> <pre>for var in diccio:\n    a = funcion(var)\n</pre> <ul> <li>La variable <code>var</code> est\u00e1 accediento impl\u00edcitamente a cada llave del diccionario <code>diccio</code>.</li> <li>Recordar que, teniendo la llave, es posible acceder al valor asociado mediante <code>diccio[var]</code>.</li> </ul> <p>1. Escriba la funci\u00f3n <code>contar_letras(palabra)</code> que reciba un string y retorne un diccionario que indique cu\u00e1ntas veces aparece cada letra en dicho string.</p> <pre><code>&gt;&gt;&gt; contar_letras('entretener')\n{'e': 4, 'n': 2, 'r': 2, 't': 2}\n&gt;&gt;&gt; contar_letras('lapiz')\n{'a': 1, 'i': 1, 'l': 1, 'p': 1, 'z': 1}\n</code></pre> In\u00a0[15]: Copied! <pre>def contar_letras(palabra):\n    d = dict()\n    for letra in palabra:\n        if letra not in d:\n            d[letra] = 0\n        d[letra] += 1\n    return d\n\ndiccio = contar_letras(\"entretener\")\nprint(diccio)\n</pre> def contar_letras(palabra):     d = dict()     for letra in palabra:         if letra not in d:             d[letra] = 0         d[letra] += 1     return d  diccio = contar_letras(\"entretener\") print(diccio) <pre>{'e': 4, 'n': 2, 't': 2, 'r': 2}\n</pre> <p>2. Considere la siguente lista de strings <code>palabras</code>.</p> <pre><code>lista_palabras = [\"el\", \"jardin\", \"la\", \"casa\", \"mi\", \"el\", \"la\", ...]\n</code></pre> <p>Con el objetivo de construir una nube de palabras, se requiere de una funci\u00f3n <code>contar_palabras(lista)</code> que, dada una lista de palabras <code>lista</code>, retorne una lista de listas, donde la primera componente sea una palabra y la segunda la cantidad de veces que paraece dicha palabra en la lista.</p> <pre><code>&gt;&gt;&gt; contar_palabras(lista)\n[['mi', 1], ['casa', 1], ['jardin', 1], ['el', 2], ['la', 2], ...]\n</code></pre> In\u00a0[16]: Copied! <pre>def contar_palabras(lista):\n    d = {}\n    for p in lista:\n        if p not in d:\n            d[p] = 0\n        d[p]+=1\n    lista = list()\n    for pa in d:\n        lista.append([pa,d[pa]])\n    return lista\n\nlista_palabras = [\"el\", \"jardin\", \"la\", \"casa\", \"mi\", \"el\", \"la\"]\n\nprint(contar_palabras(lista_palabras))\n</pre> def contar_palabras(lista):     d = {}     for p in lista:         if p not in d:             d[p] = 0         d[p]+=1     lista = list()     for pa in d:         lista.append([pa,d[pa]])     return lista  lista_palabras = [\"el\", \"jardin\", \"la\", \"casa\", \"mi\", \"el\", \"la\"]  print(contar_palabras(lista_palabras)) <pre>[['el', 2], ['jardin', 1], ['la', 2], ['casa', 1], ['mi', 1]]\n</pre> <p>3. Considere la lista de listas <code>viajes</code>, donde cada sublista agrupa el nombre de una persona y una ciudad donde esa persona ha viajado:</p> <pre><code>viajes = [[\"Juan\", \"Santiago\"], [\"Pedro\", \"Coquimbo\"], [\"Juan\", \"Valparaiso\"], [\"Diego\", \"Talcahuano\"], ...]\n</code></pre> <p>Escriba la funci\u00f3n <code>ciudades_visitadas(viajes)</code> que reciba una lista como la mostrada en <code>viajes</code>. Esta funci\u00f3n debe retornar un diccionario, cuyas llave corresponde al nombre de una persona y el valor es una lista con todas las ciudades que ha visitado esa persona.</p> <pre><code>&gt;&gt;&gt; ciudades_visitadas(viajes)\n{'Diego': ['Talcahuano'], 'Pedro': ['Coquimbo'], 'Juan': ['Santiago', 'Valparaiso'], ...}\n</code></pre> In\u00a0[17]: Copied! <pre>def ciudades_visitadas(viajes):\n    d = dict()\n    for viaje in viajes:\n        persona = viaje[0]\n        ciudad = viaje[1]\n        if persona not in d:\n            d[persona] = list()\n        d[persona].append(ciudad)\n    return d\n\nv = [[\"Juan\", \"Santiago\"], [\"Pedro\", \"Coquimbo\"], [\"Juan\", \"Valparaiso\"], [\"Diego\", \"Talcahuano\"]]\nprint(ciudades_visitadas(v))\n</pre> def ciudades_visitadas(viajes):     d = dict()     for viaje in viajes:         persona = viaje[0]         ciudad = viaje[1]         if persona not in d:             d[persona] = list()         d[persona].append(ciudad)     return d  v = [[\"Juan\", \"Santiago\"], [\"Pedro\", \"Coquimbo\"], [\"Juan\", \"Valparaiso\"], [\"Diego\", \"Talcahuano\"]] print(ciudades_visitadas(v)) <pre>{'Juan': ['Santiago', 'Valparaiso'], 'Pedro': ['Coquimbo'], 'Diego': ['Talcahuano']}\n</pre>"},{"location":"07_Diccionarios.html#estructura-de-datos-diccionarios","title":"Estructura de datos: Diccionarios\u00b6","text":""},{"location":"07_Diccionarios.html#diccionarios","title":"Diccionarios\u00b6","text":""},{"location":"07_Diccionarios.html#creacion-de-diccionarios","title":"Creaci\u00f3n de Diccionarios\u00b6","text":"<p>Un diccionario vac\u00edo puede ser creado por medio de la funci\u00f3n <code>dict()</code> y con el par\u00e9ntesis de llave <code>{}</code>.</p>"},{"location":"07_Diccionarios.html#manipulacion-de-diccionarios","title":"Manipulaci\u00f3n de Diccionarios\u00b6","text":""},{"location":"07_Diccionarios.html#agregarmodificar-un-elemento","title":"Agregar/Modificar un elemento\u00b6","text":"<p>Se debe hacer una asignaci\u00f3n del diccionario con una llave igual a un valor.</p> <ul> <li>Si la llave utilizada no existe en el diccionario, se agrega un nuevo elemento.</li> <li>Si la llave utilizada existe en el diccionario, el valor asociado es modificado.</li> </ul>"},{"location":"07_Diccionarios.html#eliminar-un-elemento","title":"Eliminar un elemento\u00b6","text":"<p>Usando la instrucci\u00f3n <code>del</code> se puede eliminar un elemento del diccionario. Se debe indicar la llave del elemento que se quiere eliminar.</p>"},{"location":"07_Diccionarios.html#acceder-a-elementos-de-un-diccionario","title":"Acceder a elementos de un diccionario\u00b6","text":"<p>El valor asociado a la llave <code>k</code> del diccionario <code>d</code> se puede obtener como <code>d[k]</code>:</p>"},{"location":"07_Diccionarios.html#funciones-sobre-diccionarios","title":"Funciones sobre Diccionarios\u00b6","text":""},{"location":"07_Diccionarios.html#cantidad-de-elementos","title":"Cantidad de elementos\u00b6","text":"<p>La funci\u00f3n <code>len</code> permite saber la cantidad de elementos del diccionario, es decir, la cantidad de pares llave-valor.</p>"},{"location":"07_Diccionarios.html#comprobar-si-una-llave-esta-en-el-diccionario","title":"Comprobar si una llave est\u00e1 en el diccionario\u00b6","text":"<p>La instrucci\u00f3n <code>in</code> verifica si una llave est\u00e1 en el diccionario.</p>"},{"location":"07_Diccionarios.html#iteracion-sobre-diccionarios","title":"Iteraci\u00f3n sobre diccionarios\u00b6","text":"<p>Se pueden utilizar ciclos <code>for</code> para iterar sobre diccionarios. En este caso estaremos iterando sobre las llaves del diccionario. Como el diccionario no tiene orden particular, lo \u00fanico que sabemos es que se iterar\u00e1 sobre todas las llaves.</p>"},{"location":"07_Diccionarios.html#ejercicios","title":"Ejercicios\u00b6","text":""},{"location":"08_Texto_y_Archivos.html","title":"Texto y Archivos","text":"<p>Utilizando el caracter backslash (<code>'\\'</code>) se pueden incluir caracteres que tienen interpretaciones especiales en un string, como un cambio de l\u00ednea o un tabulador.</p> <ul> <li>Corresponde al caracter backslash seguido de una n: <code>'\\n'</code>.</li> <li>Puede verse su efecto al utilizar <code>print</code>.</li> </ul> In\u00a0[1]: Copied! <pre>a = \"piano\\nviolin\\noboe\"\n</pre> a = \"piano\\nviolin\\noboe\" In\u00a0[2]: Copied! <pre>print(a)\n</pre> print(a) <pre>piano\nviolin\noboe\n</pre> <p>La secuencia de escape es parte del string.</p> In\u00a0[3]: Copied! <pre>a\n</pre> a Out[3]: <pre>'piano\\nviolin\\noboe'</pre> <ul> <li>Se utiliza con backslash m\u00e1s el caracter t: <code>'\\t'</code></li> <li>Es equivalente a hacer una tabulaci\u00f3n.</li> </ul> In\u00a0[4]: Copied! <pre>a = \"piano\\tviolin\\toboe\"\nprint(a)\n</pre> a = \"piano\\tviolin\\toboe\" print(a) <pre>piano\tviolin\toboe\n</pre> In\u00a0[5]: Copied! <pre>a\n</pre> a Out[5]: <pre>'piano\\tviolin\\toboe'</pre> <ul> <li>A pesar de que se ven como dos caracteres, las secuencias de escape ocupan una posici\u00f3n en el string.</li> <li>Como el caracter <code>'\\'</code> se usa para las secuencias de escape, si queremos incluirlo en un string tenemos que usar la secuencia de escape: <code>'\\\\'</code>.</li> </ul> In\u00a0[6]: Copied! <pre>len(\"\\n\")\n</pre> len(\"\\n\") Out[6]: <pre>1</pre> In\u00a0[7]: Copied! <pre>len(\"\\t\")\n</pre> len(\"\\t\") Out[7]: <pre>1</pre> In\u00a0[8]: Copied! <pre>len(\"piano\\nviolin\\noboe\")\n</pre> len(\"piano\\nviolin\\noboe\") Out[8]: <pre>17</pre> <p>El m\u00e9todo <code>s.strip()</code> crea y retorna un nuevo string a partir de un string original <code>s</code>, removiendo espacios, cambios de l\u00ednea, tabuladores y otros caracteres especiales que aparezcan al inicio y final de <code>s</code>.</p> <p>El valor del string original <code>s</code>, NO cambia.</p> In\u00a0[9]: Copied! <pre>s = \"hola mundo\\n\"\nprint(s)\n</pre> s = \"hola mundo\\n\" print(s) <pre>hola mundo\n\n</pre> In\u00a0[10]: Copied! <pre>print(s.strip())\n</pre> print(s.strip()) <pre>hola mundo\n</pre> In\u00a0[11]: Copied! <pre>s\n</pre> s Out[11]: <pre>'hola mundo\\n'</pre> In\u00a0[12]: Copied! <pre>s.strip()\n</pre> s.strip() Out[12]: <pre>'hola mundo'</pre> In\u00a0[13]: Copied! <pre>s = '\\n\\t hola \\t\\n   '\ns.strip()\n</pre> s = '\\n\\t hola \\t\\n   ' s.strip() Out[13]: <pre>'hola'</pre> <p>Importante: El m\u00e9todo <code>strip</code> no remueve espacios, ni caracteres especiales que est\u00e9n en medio de las palabras.</p> In\u00a0[14]: Copied! <pre>\"hola\\nmundo\\n\".strip()\n</pre> \"hola\\nmundo\\n\".strip() Out[14]: <pre>'hola\\nmundo'</pre> <p>El m\u00e9todo <code>s.replace(antes,despues)</code> crea y retorna un nuevo string a partir de un string original <code>s</code>, reemplazando TODAS las apariciones del string <code>antes</code> con el string <code>despues</code>.</p> <p>El valor del string original <code>s</code>, NO cambia.</p> In\u00a0[15]: Copied! <pre>orden = \"Quiero arroz con pollo\"\norden.replace(\"arroz\",\"pure\")\n</pre> orden = \"Quiero arroz con pollo\" orden.replace(\"arroz\",\"pure\") Out[15]: <pre>'Quiero pure con pollo'</pre> In\u00a0[16]: Copied! <pre>print(orden.replace(\"arroz\",\"pure\"))\n</pre> print(orden.replace(\"arroz\",\"pure\")) <pre>Quiero pure con pollo\n</pre> In\u00a0[17]: Copied! <pre>orden = orden.replace(\"arroz\",\"pure\")\nprint(orden)\n</pre> orden = orden.replace(\"arroz\",\"pure\") print(orden) <pre>Quiero pure con pollo\n</pre> In\u00a0[18]: Copied! <pre>a = \"11111111-5\"\n</pre> a = \"11111111-5\" In\u00a0[19]: Copied! <pre># reemplazar el caracter '1' por '2' en la variable a (que es un string)\na.replace(\"1\",\"2\")\n</pre> # reemplazar el caracter '1' por '2' en la variable a (que es un string) a.replace(\"1\",\"2\") Out[19]: <pre>'22222222-5'</pre> In\u00a0[20]: Copied! <pre># reemplazar el caracter '1' por '2' en la variable a (que es un string)\n# solo se reemplaza 2 veces\na.replace(\"1\",\"2\",2)\n</pre> # reemplazar el caracter '1' por '2' en la variable a (que es un string) # solo se reemplaza 2 veces a.replace(\"1\",\"2\",2) Out[20]: <pre>'22111111-5'</pre> <p>El m\u00e9todo <code>s.split(sep)</code> separa el string <code>s</code> en varios substrings usando el string <code>sep</code> como separador, retornando una lista con los substrings resultantes. Si se omite el separador, se utiliza el espacio en blanco para separar el string <code>s</code>.</p> <p>El valor del string original <code>s</code>, NO cambia.</p> In\u00a0[21]: Copied! <pre>s = \"Ana lavaba las sabanas\"\n</pre> s = \"Ana lavaba las sabanas\" In\u00a0[22]: Copied! <pre>s.split()\n</pre> s.split() Out[22]: <pre>['Ana', 'lavaba', 'las', 'sabanas']</pre> In\u00a0[23]: Copied! <pre>s.split(\"aba\")\n</pre> s.split(\"aba\") Out[23]: <pre>['Ana lav', ' las s', 'nas']</pre> In\u00a0[24]: Copied! <pre>print(s)\n</pre> print(s) <pre>Ana lavaba las sabanas\n</pre> <p>El m\u00e9todo <code>s.join(lista)</code> une los strings contenidos en <code>lista</code>, separ\u00e1ndolos con el string <code>s</code>, retornando el string resultante.</p> <p>Ni la lista original ni el string <code>s</code> cambian.</p> In\u00a0[25]: Copied! <pre>valores = ['0', '1', '2', '3', '4', '5']\npegamento = \" \"\npegamento.join(valores)\n</pre> valores = ['0', '1', '2', '3', '4', '5'] pegamento = \" \" pegamento.join(valores) Out[25]: <pre>'0 1 2 3 4 5'</pre> In\u00a0[26]: Copied! <pre>\",\".join(valores)\n</pre> \",\".join(valores) Out[26]: <pre>'0,1,2,3,4,5'</pre> In\u00a0[27]: Copied! <pre>valores\n</pre> valores Out[27]: <pre>['0', '1', '2', '3', '4', '5']</pre> <p>El separador puede ser un string nulo.</p> In\u00a0[28]: Copied! <pre>\"\".join(valores)\n</pre> \"\".join(valores) Out[28]: <pre>'012345'</pre> <p>La lista debe contener strings.</p> In\u00a0[29]: Copied! <pre>\" \".join([1,2,4])\n</pre> \" \".join([1,2,4]) <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n/tmp/ipython-input-1548230070.py in &lt;cell line: 0&gt;()\n----&gt; 1 \" \".join([1,2,4])\n\nTypeError: sequence item 0: expected str instance, int found</pre> In\u00a0[30]: Copied! <pre>\" \".join([\"1\",\"2\",\"4\"])\n</pre> \" \".join([\"1\",\"2\",\"4\"]) Out[30]: <pre>'1 2 4'</pre> <p>La interpolaci\u00f3n de strings permite construir strings con formato, a partir de una plantilla que se rellena en forma din\u00e1mica.</p> In\u00a0[31]: Copied! <pre>s = \"Soy {0} y vivo en {1}\"\n</pre> s = \"Soy {0} y vivo en {1}\" In\u00a0[32]: Copied! <pre>s.format(\"Perico\",\"Valparaiso\")\n</pre> s.format(\"Perico\",\"Valparaiso\") Out[32]: <pre>'Soy Perico y vivo en Valparaiso'</pre> In\u00a0[33]: Copied! <pre>s.format(\"Erika\",\"Berlin\")\n</pre> s.format(\"Erika\",\"Berlin\") Out[33]: <pre>'Soy Erika y vivo en Berlin'</pre> In\u00a0[34]: Copied! <pre>s.format(\"Wang Dawei\",\"Beijing\")\n</pre> s.format(\"Wang Dawei\",\"Beijing\") Out[34]: <pre>'Soy Wang Dawei y vivo en Beijing'</pre> In\u00a0[35]: Copied! <pre>print(s)\n</pre> print(s) <pre>Soy {0} y vivo en {1}\n</pre> <ul> <li><code>{0}</code> y <code>{1}</code> se llaman campos, y el m\u00e9todo <code>format</code> los rellena con sus argumentos en orden. El primer argumento sustituye el campo <code>{0}</code>, el segundo el campo <code>{1}</code>, y as\u00ed sucesivamente.</li> </ul> In\u00a0[36]: Copied! <pre>\"{1}{0}{2}{0}\".format(\"a\",\"v\",\"c\")\n</pre> \"{1}{0}{2}{0}\".format(\"a\",\"v\",\"c\") Out[36]: <pre>'vaca'</pre> In\u00a0[37]: Copied! <pre>\"{0} y {1}\".format(\"carne\",\"huevos\")\n</pre> \"{0} y {1}\".format(\"carne\",\"huevos\") Out[37]: <pre>'carne y huevos'</pre> In\u00a0[38]: Copied! <pre>\"{1} y {0}\".format(\"carne\",\"huevos\")\n</pre> \"{1} y {0}\".format(\"carne\",\"huevos\") Out[38]: <pre>'huevos y carne'</pre> <ul> <li>Si los campos aparecen una \u00fanica vez en la plantilla, puede omitirse los n\u00fameros. En este caso los campos se rellenan en orden de aparici\u00f3n. El primero ser\u00e1 {0}, el segundo {1}, y as\u00ed sucesivamente.</li> </ul> In\u00a0[39]: Copied! <pre>s = \"Soy {} y vivo en {}\"\n</pre> s = \"Soy {} y vivo en {}\" In\u00a0[40]: Copied! <pre>s.format(\"Perico\",\"Valparaiso\")\n</pre> s.format(\"Perico\",\"Valparaiso\") Out[40]: <pre>'Soy Perico y vivo en Valparaiso'</pre> <p>El m\u00e9todo <code>format</code> debe tener suficientes argumentos para poder rellenar la plantilla, aunque no se usen todos.</p> <p>Si en la plantilla se usa un campo para el que <code>format</code> no tiene argumento, se produce un error.</p> In\u00a0[41]: Copied! <pre>\"{2}\".format(\"a\")\n</pre> \"{2}\".format(\"a\") <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n/tmp/ipython-input-521600033.py in &lt;cell line: 0&gt;()\n----&gt; 1 \"{2}\".format(\"a\")\n\nIndexError: Replacement index 2 out of range for positional args tuple</pre> In\u00a0[42]: Copied! <pre>\"{0}, {1} {3}\".format(\"casa\", \"azul\", \"grande\", \"verde\")\n</pre> \"{0}, {1} {3}\".format(\"casa\", \"azul\", \"grande\", \"verde\") Out[42]: <pre>'casa, azul verde'</pre> <p>Los archivos de texto est\u00e1n compuestos \u00fanicamente por caracteres legibles por los humanos (como letras, d\u00edgitos y caracteres de puntuaci\u00f3n), pero sin ning\u00fan tipo de formato tipogr\u00e1fico. Es b\u00e1sicamente lo mismo que almacenamos en variables de tipo string, pero que se guardan en un medio persistente, como el disco del computador o una unidad de memoria externa (pendrive, tarjeta de memoria, etc.).</p> <p>Al igual que todos los archivos, los archivos de texto tienen un nombre en el dispositivo donde se almacenan.</p> <p>Ejemplo de archivo: <code>quijote.txt</code></p> <pre><code>En un lugar de La Mancha\nde cuyo nombre no quiero acordarme\nno ha mucho tiempo que vivia un hidalgo\n</code></pre> <ol> <li>Abrir el archivo.</li> <li>Recorrer el archivo.</li> <li>Cerrar el archivo.</li> </ol> <p>Un archivo puede ser abierto mediante la funci\u00f3n <code>open</code>, que acepta como par\u00e1metros el nombre que tiene el archivo en el disco y el modo de apertura.</p> <p>Los modos de apertura son:</p> <ul> <li>Lectura: <code>'r'</code>.</li> <li>Escritura: <code>'w'</code>.</li> <li>Agregar al final del archivo: <code>'a'</code>.</li> </ul> In\u00a0[45]: Copied! <pre># Por omisi\u00f3n los archivos se abren en modo 'r'\n# Se asume que el archivo .txt est\u00e1 en la misma ruta del c\u00f3digo de Python\narchivo = open('quijote.txt')\n</pre> # Por omisi\u00f3n los archivos se abren en modo 'r' # Se asume que el archivo .txt est\u00e1 en la misma ruta del c\u00f3digo de Python archivo = open('quijote.txt') <p>Las l\u00edneas de un archivo previamente abierto pueden recorrerse utilizando un ciclo <code>for</code>.</p> <p>El final de cada l\u00ednea incluye el caracter de nueva l\u00ednea: <code>'\\n'</code>, que es le\u00eddo en el for. Si no queremos utilizarlo, es posible \"limpiar\" cada l\u00ednea le\u00edda antes de procesarla utilizando el m\u00e9todo <code>strip()</code> estudiado previamente.</p> In\u00a0[46]: Copied! <pre>for linea in archivo:\n    # Operaciones sobre linea\n    linea = linea.strip()\n    print(linea)\n</pre> for linea in archivo:     # Operaciones sobre linea     linea = linea.strip()     print(linea) <pre>En un lugar de La Mancha\nde cuyo nombre no quiero acordarme\nno ha mucho tiempo que vivia un hidalgo\n</pre> <p>El \u00faltimo paso es cerrar el archivo luego de leer la informaci\u00f3n. Para ello se utiliza el m\u00e9todo <code>close()</code>.</p> In\u00a0[47]: Copied! <pre>archivo.close()\n</pre> archivo.close() <p>Para escribir un archivo es necesario abrirlo en modo de escritura, usando la funci\u00f3n <code>open</code> con el par\u00e1metro <code>'w'</code>.</p> In\u00a0[48]: Copied! <pre>nuevo_archivo = open('prueba.txt', 'w')\n</pre> nuevo_archivo = open('prueba.txt', 'w') <p>Para escribir se debe utilizar el m\u00e9todo <code>write</code>, que recibe como par\u00e1metro un string con el texto que se escribir\u00e1 en el archivo.</p> <p>Para que el archivo contenga m\u00faltiples l\u00edneas, cada una de ellas debe terminar en el caracter de n\u00faeva l\u00ednea: <code>'\\n'</code>.</p> In\u00a0[49]: Copied! <pre>nuevo_archivo.write('Informacion\\n')\n</pre> nuevo_archivo.write('Informacion\\n') Out[49]: <pre>12</pre> <p>Al igual que en el caso de lectura, luego de escribir la informaci\u00f3n se debe cerrar el archivo con <code>close()</code>.</p> In\u00a0[50]: Copied! <pre>nuevo_archivo.close()\n</pre> nuevo_archivo.close() <p>Para agregar datos al final de un archivo es necesario abrirlo en modo <code>'a'</code> usando la funci\u00f3n <code>open()</code>.</p> In\u00a0[51]: Copied! <pre>archivo = open('prueba.txt', 'a')\n</pre> archivo = open('prueba.txt', 'a') <p>Se utilizar\u00e1 el m\u00e9todo <code>write</code>, que recibe como par\u00e1metro un string con el texto que se agregar\u00e1 en el archivo.</p> In\u00a0[52]: Copied! <pre>archivo.write(\"Nueva informacion\\n\")\n</pre> archivo.write(\"Nueva informacion\\n\") Out[52]: <pre>18</pre> <p>Al igual que en el caso de lectura y escritura, luego de escribir la informaci\u00f3n se debe cerrar el archivo con <code>close()</code>.</p> In\u00a0[53]: Copied! <pre>archivo.close()\n</pre> archivo.close() <p>Considere un archivo que utiliza un caracter para separar la informaci\u00f3n. Por ejemplo:</p> <pre><code>Esteban:Gutierrez:49:18:32\nLuisa:Miranda:68:44:99\nJean Paul:Munoz:48:38:81\nGianfranco:Basso:54:54:50\nRomina:Smith:100:98:9\n</code></pre> In\u00a0[54]: Copied! <pre>archivo = open('alumnos.txt')\nfor linea in archivo:\n    valores = linea.strip().split(':')\n    nombres = valores[0:2]\n    notas = []\n    for nota in valores[2:5]:\n        notas.append(int(nota))\n    print(nombres[0], notas)\narchivo.close()\n</pre> archivo = open('alumnos.txt') for linea in archivo:     valores = linea.strip().split(':')     nombres = valores[0:2]     notas = []     for nota in valores[2:5]:         notas.append(int(nota))     print(nombres[0], notas) archivo.close() <pre>Esteban [49, 18, 32]\nLuisa [68, 44, 99]\nJean Paul [48, 38, 81]\nGianfranco [54, 54, 50]\nRomina [100, 98, 92]\n</pre>"},{"location":"08_Texto_y_Archivos.html#procesamiento-de-texto-y-archivos","title":"Procesamiento de Texto y Archivos\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#procesamiento-de-texto","title":"Procesamiento de Texto\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#secuencias-de-escape","title":"Secuencias de escape\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#salto-de-linea","title":"Salto de l\u00ednea\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#tabulacion","title":"Tabulaci\u00f3n\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#removiendo-caracteres-especiales","title":"Removiendo car\u00e1cteres especiales\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#reemplazar-secciones-de-un-string","title":"Reemplazar secciones de un string\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#separar-strings","title":"Separar strings\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#unir-strings","title":"Unir strings\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#interpolacion-de-strings","title":"Interpolaci\u00f3n de strings\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#archivos-de-texto","title":"Archivos de Texto\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#protocolo-de-uso-para-lectura","title":"Protocolo de uso para lectura\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#apertura-de-archivo","title":"Apertura de Archivo\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#recorrer-el-archivo","title":"Recorrer el archivo\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#cierre-de-archivo","title":"Cierre de archivo\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#creacion-de-archivos","title":"Creaci\u00f3n de archivos\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#apertura","title":"Apertura\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#escritura","title":"Escritura\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#cierre","title":"Cierre\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#agregar-informacion-a-un-archivo-existente","title":"Agregar informaci\u00f3n a un archivo existente\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#apertura","title":"Apertura\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#escritura","title":"Escritura\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#cierre","title":"Cierre\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#archivos-con-separador","title":"Archivos con separador\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#manipulacion-de-este-tipo-de-archivos","title":"Manipulaci\u00f3n de este tipo de archivos\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#ejercicios","title":"Ejercicios\u00b6","text":""},{"location":"08_Texto_y_Archivos.html#ejercicio-1","title":"Ejercicio 1\u00b6","text":"<p>Escriba un programa que abra el archivo <code>quijote.txt</code> y cuente:</p> <ul> <li>el n\u00famero de letras,</li> <li>el n\u00famero de palabras,</li> <li>el n\u00famero de l\u00edneas.</li> </ul>"},{"location":"08_Texto_y_Archivos.html#ejercicio-2","title":"Ejercicio 2\u00b6","text":"<p>A partir del archivo <code>alumnos.txt</code>, crear los siguientes archivos:</p> <p><code>aprobados.txt.</code></p> <pre><code>Luisa,Miranda,70\nJean Paul,Munoz,56\nRomina,Smith,97\n</code></pre> <p><code>reprobados.txt</code></p> <pre><code>Esteban,Gutierrez,33\nGianfranco,Basso,53\n</code></pre>"}]}